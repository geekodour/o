<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<link rel="icon" type="image/gif" href="favicon.gif"/>
<link rel="apple-touch-icon" sizes="120x120" href="touch-icon-iphone-retina.png" />
<link rel="apple-touch-icon" sizes="152x152" href="touch-icon-ipad-retina.png" />
<title>Numerical Analysis &amp; Statistics: MATLAB, R, NumPy, Julia - Hyperpolyglot</title>
<script type="text/javascript"
  src="http://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<style type="text/css" id="internal-style">
@import url(hyperpolyglot.css);
</style>
<meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
<meta http-equiv="content-language" content="en"/>
</head>
<body>
<div id="container-wrap-wrap">
  <div id="container-wrap">
    <div id="container">
      <div id="header">
        <h1><a href="index.html"><span>Hyperpolyglot</span></a></h1>
      </div>
      <div id="content-wrap">
        <div id="main-content">
<div id="page-title">
                            Numerical Analysis &amp; Statistics: MATLAB, R, NumPy, Julia
                        </div>
<div id="page-content">
                        

<p><a name="top" shape="rect" id="top"></a><em>a side-by-side reference sheet</em></p>
<p><strong><a href="numerical-analysis" shape="rect">sheet one:</a></strong> <a href="numerical-analysis#grammar-invocation" shape="rect">grammar and invocation</a> | <a href="numerical-analysis#var-expr" shape="rect">variables and expressions</a> | <a href="numerical-analysis#arithmetic-logic" shape="rect">arithmetic and logic</a> | <a href="numerical-analysis#strings" shape="rect">strings</a> | <a href="numerical-analysis#regexes" shape="rect">regexes</a> | <a href="numerical-analysis#dates-time" shape="rect">dates and time</a> | <a href="numerical-analysis#tuples" shape="rect">tuples</a> | <a href="numerical-analysis#arrays" shape="rect">arrays</a> | <a href="numerical-analysis#arithmetic-sequences" shape="rect">arithmetic sequences</a> | <a href="numerical-analysis#two-d-arrays" shape="rect">2d arrays</a> | <a href="numerical-analysis#three-d-arrays" shape="rect">3d arrays</a> | <a href="numerical-analysis#dictionaries" shape="rect">dictionaries</a> | <a href="numerical-analysis#functions" shape="rect">functions</a> | <a href="numerical-analysis#execution-control" shape="rect">execution control</a> | <a href="numerical-analysis#file-handle" shape="rect">file handles</a> | <a href="numerical-analysis#directories" shape="rect">directories</a> | <a href="numerical-analysis#processes-environment" shape="rect">processes and environment</a> | <a href="numerical-analysis#libraries-namespaces" shape="rect">libraries and namespaces</a> | <a href="numerical-analysis#reflection" shape="rect">reflection</a> | <a href="numerical-analysis#debugging" shape="rect">debugging</a></p>
<p><strong>sheet two:</strong> <a href="numerical-analysis2#tables" shape="rect">tables</a> | <a href="numerical-analysis2#import-export" shape="rect">import and export</a> | <a href="numerical-analysis2#relational-algebra" shape="rect">relational algebra</a> | <a href="numerical-analysis2#aggregation" shape="rect">aggregation</a></p>
<p><a href="numerical-analysis2#vectors" shape="rect">vectors</a> | <a href="numerical-analysis2#matrices" shape="rect">matrices</a> | <a href="numerical-analysis2#sparse-matrices" shape="rect">sparse matrices</a> | <a href="numerical-analysis2#optimization" shape="rect">optimization</a> | <a href="numerical-analysis2#polynomials" shape="rect">polynomials</a> | <a href="numerical-analysis2#descriptive-statistics" shape="rect">descriptive statistics</a> | <a href="numerical-analysis2#distributions" shape="rect">distributions</a> | <a href="numerical-analysis2#linear-regression" shape="rect">linear regression</a> | <a href="numerical-analysis2#statistical-tests" shape="rect">statistical tests</a> | <a href="numerical-analysis2#time-series" shape="rect">time series</a> | <a href="numerical-analysis2#fast-fourier-transform" shape="rect">fast fourier transform</a> | <a href="numerical-analysis2#clustering" shape="rect">clustering</a> | <a href="numerical-analysis2#images" shape="rect">images</a> | <a href="numerical-analysis2#sound" shape="rect">sound</a></p>
<p><a href="numerical-analysis2#bar-charts" shape="rect">bar charts</a> | <a href="numerical-analysis2#scatter-plots" shape="rect">scatter plots</a> | <a href="numerical-analysis2#line-charts" shape="rect">line charts</a> | <a href="numerical-analysis2#surface-charts" shape="rect">surface charts</a> | <a href="numerical-analysis2#chart-options" shape="rect">chart options</a></p>
<table class="wiki-content-table"><tr><th colspan="5" rowspan="1"><a name="tables" shape="rect" id="tables"></a><a href="numerical-analysis2#tables-note" shape="rect">tables</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="construct-from-column-arrays" shape="rect" id="construct-from-column-arrays"></a><a href="numerical-analysis2#construct-from-column-arrays-note" shape="rect">construct from column arrays</a></td><td rowspan="1" colspan="1">sx = {'F' 'F' 'F' 'M' 'M' 'M'}<br />
ht = [69 64 67 68 72 71]<br />
wt = [148 132 142 149 167 165]<br />
cols = {'sx', 'ht', 'wt'}<br />
people = table(sx', ht', wt', 'VariableNames', cols)</td><td rowspan="1" colspan="1"><span style="color: gray"># gender, height, weight of some people<br />
# in inches and lbs:</span><br />
sx = c("F", "F", "F", "M", "M", "M")<br />
ht = c(69, 64, 67, 68, 72, 71)<br />
wt = c(148, 132, 142, 149, 167, 165)<br />
people = data.frame(sx, ht, wt)</td><td rowspan="1" colspan="1">sx = ['F', 'F', 'F', 'F', 'M', 'M']<br />
ht = [69, 64, 67, 66, 72, 70]<br />
wt = [150, 132, 142, 139, 167, 165]<br />
people = pd.DataFrame({'sx': sx, 'ht': ht, 'wt': wt})</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="construct-from-row-dictionaries" shape="rect" id="construct-from-row-dictionaries"></a><a href="numerical-analysis2#construct-from-row-dictionaries-note" shape="rect">construct from row dictionaries</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">rows = [<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'F', 'ht': 69, 'wt': 150},<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'F', 'ht': 64, 'wt': 132},<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'F', 'ht': 67, 'wt': 142},<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'F', 'ht': 66, 'wt': 139},<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'M', 'ht': 72, 'wt': 167},<br />
<span style="white-space: pre-wrap;">  </span>{'sx': 'M', 'ht': 70, 'wt': 165}]<br />
people = pd.DataFrame(rows)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="table-size" shape="rect" id="table-size"></a><a href="numerical-analysis2#table-size-note" shape="rect">size</a></td><td rowspan="1" colspan="1">height(people)<br />
width(people)</td><td rowspan="1" colspan="1">nrow(people)<br />
ncol(people)<br />
<br />
<span style="color: gray"># number of rows and cols in 2-element vector:</span><br />
dim(people)</td><td rowspan="1" colspan="1">len(people)<br />
len(people.columns)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="column-names-as-array" shape="rect" id="column-names-as-array"></a><a href="numerical-analysis2#column-names-as-array-note" shape="rect">column names as array</a></td><td rowspan="1" colspan="1">people.Properties.VariableNames</td><td rowspan="1" colspan="1">names(people)<br />
colnames(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>returns</em> Index <em>object:</em></span><br />
people.columns</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="access-column-as-array" shape="rect" id="access-column-as-array"></a><a href="numerical-analysis2#access-column-as-array-note" shape="rect">access column as array</a></td><td rowspan="1" colspan="1">people.ht<br />
people.(2)</td><td rowspan="1" colspan="1"><span style="color: gray"># vectors:</span><br />
people$ht<br />
people[,2]<br />
people[['ht']]<br />
people[[2]]<br />
<span style="color: gray"># 1 column data frame:</span><br />
people[2]</td><td rowspan="1" colspan="1">people['ht']<br />
<br />
<span style="color: gray"># if name does not conflict with any DataFrame attributes:</span><br />
people.ht</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="access-row-as-tuple" shape="rect" id="access-row-as-tuple"></a><a href="numerical-analysis2#access-row-as-tuple-note" shape="rect">access row as tuple</a></td><td rowspan="1" colspan="1">people(1,:)</td><td rowspan="1" colspan="1"><span style="color: gray"># 1 row data frame:</span><br />
people[1, ]<br />
<span style="color: gray"># list:</span><br />
as.list(people[1, ])</td><td rowspan="1" colspan="1">people.ix[0]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="access-datum" shape="rect" id="access-datum"></a><a href="numerical-analysis2#access-datum-note" shape="rect">access datum</a></td><td rowspan="1" colspan="1"><span style="color: gray">% height of 1st person:</span><br />
people(1,2)</td><td rowspan="1" colspan="1"><span style="color: gray"># height of 1st person:</span><br />
people[1,2]</td><td rowspan="1" colspan="1">people.get_value(0, 'ht')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-by-column" shape="rect" id="order-rows-by-column"></a><a href="numerical-analysis2#order-rows-by-column-note" shape="rect">order rows by column</a></td><td rowspan="1" colspan="1">sortrows(people, 'ht')</td><td rowspan="1" colspan="1">people[order(people$ht), ]</td><td rowspan="1" colspan="1">people.sort(['ht'])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-by-multiple-columns" shape="rect" id="order-rows-by-multiple-columns"></a><a href="numerical-analysis2#order-rows-by-multiple-columns-note" shape="rect">order rows by multiple columns</a></td><td rowspan="1" colspan="1">sortrows(people, {'sx', 'ht'})</td><td rowspan="1" colspan="1">people[order(people$sx, people$ht), ]</td><td rowspan="1" colspan="1">people.sort(['sx', 'ht'])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="order-rows-descending-order" shape="rect" id="order-rows-descending-order"></a><a href="numerical-analysis2#order-rows-descending-order-note" shape="rect">order rows in descending order</a></td><td rowspan="1" colspan="1">sortrows(people, 'ht', 'descend')</td><td rowspan="1" colspan="1">people[order(-people$ht), ]</td><td rowspan="1" colspan="1">people.sort('ht', ascending=[False])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="limit-rows" shape="rect" id="limit-rows"></a><a href="numerical-analysis2#limit-rows-note" shape="rect">limit rows</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">people(1:3, :)</td><td rowspan="1" colspan="1">people[seq(1, 3), ]</td><td rowspan="1" colspan="1">people[0:3]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="offset-rows" shape="rect" id="offset-rows"></a><a href="numerical-analysis2#offset-rows-note" shape="rect">offset rows</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">people(4:6, :)</td><td rowspan="1" colspan="1">people[seq(4, 6), ]</td><td rowspan="1" colspan="1">people[3:]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="reshape-table" shape="rect" id="reshape-table"></a><a href="numerical-analysis2#reshape-table-note" shape="rect">reshape</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">people$couple = c(1, 2, 3, 1, 2, 3)<br />
reshape(people, idvar="couple", direction="wide",<br />
<span style="white-space: pre-wrap;">  </span>timevar="sx", v.names=c("ht", "wt"))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="rm-rows-with-null-fields" shape="rect" id="rm-rows-with-null-fields"></a><a href="numerical-analysis2#rm-rows-with-null-fields-note" shape="rect">remove rows with null fields</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">sx = c('F', 'F', 'M', 'M')<br />
wt = c(120, NA, 150, 170)<br />
<br />
df = data.frame(sx, wt)<br />
df2 = na.omit(df)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="attach-columns" shape="rect" id="attach-columns"></a><a href="numerical-analysis2#attach-columns-note" shape="rect">attach columns</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># put columns ht, wt, and sx<br />
# in variable name search path:</span><br />
attach(people)<br />
sum(ht)<br />
<br />
<span style="color: gray"># alternative which doesn't put columns in<br />
# search path:</span><br />
with(people, sum(ht))</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="detach-columns" shape="rect" id="detach-columns"></a><a href="numerical-analysis2#detach-columns-note" shape="rect">detach columns</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">detach(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="spreadsheet-editor" shape="rect" id="spreadsheet-editor"></a><a href="numerical-analysis2#spreadsheet-editor-note" shape="rect">spreadsheet editor</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>can edit data, in which case return value of</em> edit <em>must be saved</em></span><br />
people = edit(people)</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="import-export" shape="rect" id="import-export"></a><a href="numerical-analysis2#import-export-note" shape="rect">import and export</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="import-tab-delimited" shape="rect" id="import-tab-delimited"></a><a href="numerical-analysis2#import-tab-delimited-note" shape="rect">import tab delimited</a></td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines variable names:</span><br />
readtable('/tmp/password.txt', 'Delimiter', '\t')<br />
<br />
<span style="color: gray"># file suffix must be .txt, .dat, or .csv</span></td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines variable names:</span><br />
df = read.delim('/path/to.tab', stringsAsFactors=F, quote=NULL)</td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines column names:</span><br />
df = pd.read_table('/path/to.tab')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="import-csv" shape="rect" id="import-csv"></a><a href="numerical-analysis2#import-csv-note" shape="rect">import csv</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray">% first row defines variable names:</span><br />
df = readtable('/path/to.csv')</td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines variable names:</span><br />
df = read.csv('/path/to.csv', stringsAsFactors=F)</td><td rowspan="1" colspan="1"><span style="color: gray"># first row defines column names:</span><br />
df = pd.read_csv('/path/to.csv')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-separator" shape="rect" id="set-column-separator"></a><a href="numerical-analysis2#set-column-separator-note" shape="rect">set column separator</a></td><td rowspan="1" colspan="1">df = readtable('/etc/passwd',<br />
<span style="white-space: pre-wrap;">  </span>'Delimiter', ':',<br />
<span style="white-space: pre-wrap;">  </span>'ReadVariableNames', 0,<br />
<span style="white-space: pre-wrap;">  </span>'HeaderLines', 10)</td><td rowspan="1" colspan="1">df = read.delim('/etc/passwd',<br />
<span style="white-space: pre-wrap;">  </span>sep=':',<br />
<span style="white-space: pre-wrap;">  </span>header=FALSE,<br />
<span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd</span><br />
<br />
df = pd.read_table('/tmp/passwd', sep=':', header=None)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-separator-whitesp" shape="rect" id="set-column-separator-whitesp"></a><a href="numerical-analysis2#set-column-separator-whitesp-note" shape="rect">set column separator to whitespace</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.delim('/path/to.txt', sep='')</td><td rowspan="1" colspan="1">df = read_table('/path/to.txt', sep='\s+')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="set-quote-char" shape="rect" id="set-quote-char"></a><a href="numerical-analysis2#set-quote-char-note" shape="rect">set quote character</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># default quote character for both read.csv and read.delim<br />
# is double quotes. The quote character is escaped by doubling it.</span><br />
<br />
<span style="color: gray"># use single quote as quote character:</span><br />
df = read.csv('/path/to/single-quote.csv', quote="'")<br />
<br />
<span style="color: gray"># no quote character:</span><br />
df = read.csv('/path/to/no-quote.csv', quote="")</td><td rowspan="1" colspan="1"><span style="color: gray"><em>Both</em> read_table <em>and</em> read_csv <em>use double quotes as the quote character and there is no way to change it. A double quote can be escaped by doubling it.</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="import-file-without-header" shape="rect" id="import-file-without-header"></a><a href="numerical-analysis2#import-file-without-header-note" shape="rect">import file w/o header</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># column names are V1, V2, …</span><br />
read.delim('/etc/passwd',<br />
<span style="white-space: pre-wrap;">  </span>sep=':',<br />
<span style="white-space: pre-wrap;">  </span>header=FALSE,<br />
<span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd</span><br />
<span style="color: gray">#</span><br />
<span style="color: gray"># column names are X0, X1, …</span><br />
df = pd.read_table('/tmp/passwd', sep=':', header=None)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-names" shape="rect" id="set-column-names"></a><a href="numerical-analysis2#set-column-names-note" shape="rect">set column names</a></td><td rowspan="1" colspan="1">df = readtable('/path/to/no-header.csv',<br />
<span style="white-space: pre-wrap;">  </span>'ReadVariableNames', 0)<br />
<br />
df.Properties.VariableNames = {'ht', 'wt', 'age'}</td><td rowspan="1" colspan="1">df = read.csv('/path/to/no-header.csv',<br />
<span style="white-space: pre-wrap;">  </span>header=FALSE,<br />
<span style="white-space: pre-wrap;">  </span>col.names=c('ht', 'wt', 'age'))</td><td rowspan="1" colspan="1">df = pd.read_csv('/path/to/no-header.csv',<br />
<span style="white-space: pre-wrap;">  </span>names=['ht', 'wt', 'age'])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="set-column-types" shape="rect" id="set-column-types"></a><a href="numerical-analysis2#set-column-types-note" shape="rect">set column types</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># possible values: NA, 'logical', 'integer', 'numeric',<br />
# 'complex', 'character', 'raw', 'factor', 'Date',<br />
# 'POSIXct'<br />
#<br />
# If type is set to NA, actual type will be inferred to be<br />
# 'logical', 'integer', 'numeric', 'complex', or 'factor'<br />
#</span><br />
df = read.csv('/path/to/data.csv',<br />
<span style="white-space: pre-wrap;">  </span>colClasses=c('integer', 'numeric', 'character'))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="recognize-null-values" shape="rect" id="recognize-null-values"></a><a href="numerical-analysis2#recognize-null-values-note" shape="rect">recognize null values</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv',<br />
<span style="white-space: pre-wrap;">  </span>colClasses=c('integer', 'logical', 'character'),<br />
<span style="white-space: pre-wrap;">  </span>na.strings=c('nil'))</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv',<br />
<span style="white-space: pre-wrap;">  </span>na_values=['nil'])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="change-decimal-mark" shape="rect" id="change-decimal-mark"></a><a href="numerical-analysis2#change-decimal-mark-note" shape="rect">change decimal mark</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to.csv', dec=',')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="recognize-thousands-separator" shape="rect" id="recognize-thousands-separator"></a><a href="numerical-analysis2#recognize-thousands-separator-note" shape="rect">recognize thousands separator</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">df = read_csv('/path/to.csv', thousands='.')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="unequal-row-length-behavior" shape="rect" id="unequal-row-length-behavior"></a><a href="numerical-analysis2#unequal-row-length-behavior-note" shape="rect">unequal row length behavior</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Missing fields will be set to NA unless</em> fill <em>is set to</em> FALSE. <em>If the column is of type character then the fill value is an empty string ''.<br />
<br />
If there are extra fields they will be parsed as an extra row unless</em> flush <em>is set to</em> FALSE</span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="skip-comment-lines" shape="rect" id="skip-comment-lines"></a><a href="numerical-analysis2#skip-comment-lines-note" shape="rect">skip comment lines</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.delim('/etc/passwd',<br />
<span style="white-space: pre-wrap;">  </span>sep=':',<br />
<span style="white-space: pre-wrap;">  </span>header=FALSE,<br />
<span style="white-space: pre-wrap;">  </span>comment.char='#')</td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="skip-rows" shape="rect" id="skip-rows"></a><a href="numerical-analysis2#skip-rows-note" shape="rect">skip rows</a></td><td rowspan="1" colspan="1">def = readtable('/path/to/data.csv',<br />
<span style="white-space: pre-wrap;">  </span>'HeaderLines', 4)</td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv', skip=4)</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv', skiprows=4)<br />
<br />
<span style="color: gray"># rows to skip can be specified individually:</span><br />
df = read_csv('/path/to/data.csv', skiprows=range(0, 4))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="max-rows-to-read" shape="rect" id="max-rows-to-read"></a><a href="numerical-analysis2#max-rows-to-read-note" shape="rect">max rows to read</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">df = read.csv('/path/to/data.csv', nrows=4)</td><td rowspan="1" colspan="1">df = read_csv('/path/to/data.csv', nrows=4)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="index-column" shape="rect" id="index-column"></a><a href="numerical-analysis2#index-column-note" shape="rect">index column</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>none</em></span></td><td rowspan="1" colspan="1">df = pd.read_csv('/path/to.csv', index_col='key_col')<br />
<br />
<span style="color: gray"># hierarchical index:</span><br />
df = pd.read_csv('/path/to.csv', index_col=['col1', 'col2'])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="export-tab-delimited" shape="rect" id="export-tab-delimited"></a><a href="numerical-analysis2#export-tab-delimited-note" shape="rect">export tab delimited</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">write.table(df, '/tmp/data.tab', sep='\t')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="export-csv" shape="rect" id="export-csv"></a><a href="numerical-analysis2#export-csv-note" shape="rect">export csv</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first column contains row names unless row.names<br />
# set to FALSE</span><br />
write.csv(df, '/path/to.csv', row.names=F)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="relational-algebra" shape="rect" id="relational-algebra"></a><a href="numerical-analysis2#relational-algebra-note" shape="rect">relational algebra</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">project columns by name</td><td rowspan="1" colspan="1">people(:, {'sx', 'ht'})</td><td rowspan="1" colspan="1">people[c('sx', 'ht')]</td><td rowspan="1" colspan="1">people[['sx', 'ht']]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">project columns by position</td><td rowspan="1" colspan="1">people(:, [1 2])</td><td rowspan="1" colspan="1">people[c(1, 2)]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">project expression</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># convert to cm and kg:</span><br />
transform(people, ht=2.54*ht, wt=wt/2.2)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">project all columns</td><td rowspan="1" colspan="1">people(people.ht &gt; 66, :)</td><td rowspan="1" colspan="1">people[people$ht &gt; 66, ]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">rename columns</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">colnames(people) = c('gender', 'height', 'weight')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="access-sub-data-set" shape="rect" id="access-sub-data-set"></a><a href="numerical-analysis2#access-sub-data-set-note" shape="rect">access sub data frame</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># data frame of first 3 rows with<br />
# ht and wt columns reversed:</span><br />
people[1:3, c(1, 3, 2)]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="data-set-filter" shape="rect" id="data-set-filter"></a><a href="numerical-analysis2#data-set-filter-note" shape="rect">select rows</a></td><td rowspan="1" colspan="1">people(people.ht &gt; 66, :)</td><td rowspan="1" colspan="1">subset(people, ht &gt; 66)<br />
people[people$ht &gt; 66, ]</td><td rowspan="1" colspan="1">people[people['ht'] &gt; 66]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">select distinct rows</td><td rowspan="1" colspan="1">unique(people(:,{'sx'}))</td><td rowspan="1" colspan="1">unique(people[c('sx')])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">split rows</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># class(x) is list:</span><br />
x = split(people, people$sx == 'F')<br />
<br />
<span style="color: gray"># data.frame only containing females:</span><br />
x$T</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">inner join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">pw = read.delim('/etc/passwd',<br />
<span style="white-space: pre-wrap;">  </span>sep=':',<br />
<span style="white-space: pre-wrap;">  </span>header=F,<br />
<span style="white-space: pre-wrap;">  </span>comment.char='#',<br />
<span style="white-space: pre-wrap;">  </span>col.names=c('name', 'passwd', 'uid', 'gid', 'gecos',<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>'home', 'shell'))<br />
<br />
grp = read.delim('/etc/group',<br />
<span style="white-space: pre-wrap;">  </span>sep=':',<br />
<span style="white-space: pre-wrap;">  </span>header=F,<br />
<span style="white-space: pre-wrap;">  </span>comment.char='#',<br />
<span style="white-space: pre-wrap;">  </span>col.names=c('name', 'passwd', 'gid', 'members'))<br />
<br />
merge(pw, grp, by.x='gid', by.y='gid')</td><td rowspan="1" colspan="1"><span style="color: gray"># $ grep -v '^#' /etc/passwd &gt; /tmp/passwd<br />
# $ grep -v '^#' /etc/group &gt; /tmp/group</span><br />
<br />
pw = pd.read_table('/tmp/passwd', sep=':', header=None, names=['name', 'passwd', 'uid', 'gid', 'gecos', 'home', 'shell'])<br />
<br />
grp = pd.read_table('/tmp/group', sep=':', header=None, names=['name', 'passwd', 'gid', 'members'])<br />
<br />
pd.merge(pw, grp, left_on='gid', right_on='gid')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">nulls as join values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">left join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by.x='gid', by.y='gid', all.x=T)</td><td rowspan="1" colspan="1">pd.merge(pw, grp, left_on='gid', right_on='gid', how='left')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">full join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by.x='gid', by.y='gid', all=T)</td><td rowspan="1" colspan="1">pd.merge(pw, grp, left_on='gid', right_on='gid', how='outer')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">antijoin</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">pw[!(pw$gid %in% grp$gid), ]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">cross join</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">merge(pw, grp, by=c())</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="aggregation" shape="rect" id="aggregation"></a><a href="numerical-analysis2#aggregation-note" shape="rect">aggregation</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">group by column</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">grouped = people.groupby('sx')<br />
grouped.aggregate(np.max)['ht']</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">multiple aggregated values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">grouped = people.groupby('sx')<br />
grouped.aggregate(np.max)[['ht', 'wt']]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">group by multiple columns</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">aggregation functions</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">nulls and aggregation functions</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="vectors" shape="rect" id="vectors"></a><a href="numerical-analysis2#vectors-note" shape="rect">vectors</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-literal" shape="rect">vector literal</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>same as array</em></span></td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-element-wise" shape="rect">element-wise arithmetic operators</a></td><td rowspan="1" colspan="1">+ - .* ./</td><td rowspan="1" colspan="1">+ - * /</td><td rowspan="1" colspan="1">+ - * /</td><td rowspan="1" colspan="1">+ - .* ./</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-length-mismatch" shape="rect">result of vector length mismatch</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises error</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>values in shorter vector are recycled; warning if one vector is not a multiple length of the other</em></span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>raises</em> ValueError</span></td><td rowspan="1" colspan="1"><span style="color: gray">DimensionMismatch</span></td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-scalar" shape="rect">scalar multiplication</a></td><td rowspan="1" colspan="1">3 * [1, 2, 3]<br />
[1, 2, 3] * 3</td><td rowspan="1" colspan="1">3 * c(1, 2, 3)<br />
c(1, 2, 3) * 3</td><td rowspan="1" colspan="1">3 * np.array([1, 2, 3])<br />
np.array([1, 2, 3]) * 3</td><td rowspan="1" colspan="1">3 * [1, 2, 3]<br />
[1, 2, 3] * 3</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-dot" shape="rect">dot product</a></td><td rowspan="1" colspan="1">dot([1, 1, 1], [2, 2, 2])</td><td rowspan="1" colspan="1">c(1, 1, 1) %*% c(2, 2, 2)</td><td rowspan="1" colspan="1">v1 = np.array([1, 1, 1])<br />
v2 = np.array([2, 2, 2])<br />
np.dot(v1, v2)</td><td rowspan="1" colspan="1">dot([1, 1, 1], [2, 2, 2])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-cross" shape="rect">cross product</a></td><td rowspan="1" colspan="1">cross([1, 0, 0], [0, 1, 0])</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">v1 = np.array([1, 0, 0])<br />
v2 = np.array([0, 1, 0])<br />
np.cross(v1, v2)</td><td rowspan="1" colspan="1">cross([1, 0, 0], [0, 1, 0])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#vector-norms" shape="rect">norms</a></td><td rowspan="1" colspan="1">norm([1, 2, 3], 1)<br />
norm([1, 2, 3], 2)<br />
norm([1, 2, 3], Inf)</td><td rowspan="1" colspan="1">vnorm = function(x, t) {<br />
<span style="white-space: pre-wrap;">  </span>norm(matrix(x, ncol=1), t)<br />
}<br />
<br />
vnorm(c(1, 2, 3), "1")<br />
vnorm(c(1, 2, 3), "E")<br />
vnorm(c(1, 2, 3), "I")</td><td rowspan="1" colspan="1">v = np.array([1, 2, 3])<br />
np.linalg.norm(v, 1)<br />
np.linalg.norm(v, 2)<br />
np.linalg.norm(v, np.inf)</td><td rowspan="1" colspan="1">v = [1, 2, 3]<br />
<br />
norm(v, 1)<br />
norm(v, 2)<br />
norm(v, Inf)</td></tr><tr><th colspan="5" rowspan="1"><a name="matrices" shape="rect" id="matrices"></a><a href="numerical-analysis2#matrices-note" shape="rect">matrices</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="matrix-literal-constructor" shape="rect" id="matrix-literal-constructor"></a><a href="numerical-analysis2#matrix-literal-constructor-note" shape="rect">literal or constructor</a></td><td rowspan="1" colspan="1"><span style="color: gray">% row-major order:</span><br />
A = [1, 2; 3, 4]<br />
B = [4 3<br />
<span style="white-space: pre-wrap;">     </span>2 1]</td><td rowspan="1" colspan="1"><span style="color: gray"># column-major order:</span><br />
A = matrix(c(1, 3, 2, 4), 2, 2)<br />
B = matrix(c(4, 2, 3, 1), nrow=2)<br />
<br />
<span style="color: gray"># row-major order:</span><br />
A = matrix(c(1, 2, 3, 4), nrow=2, byrow=T)</td><td rowspan="1" colspan="1"><span style="color: gray"># row-major order:</span><br />
A = np.matrix([[1, 2], [3, 4]])<br />
B = np.matrix([[4, 3], [2, 1]])</td><td rowspan="1" colspan="1">A = [1 2; 3 4]<br />
B = [4 3; 2 1]</td></tr><tr><td rowspan="1" colspan="1"><a name="constant-matrices" shape="rect" id="constant-matrices"></a><a href="numerical-analysis2#constant-matrices-note" shape="rect">constant matrices</a><br />
<span style="color: gray"><em>all zeros, all ones</em></span></td><td rowspan="1" colspan="1">zeros(3, 3) <span style="color: gray"><em>or</em></span> zeros(3)<br />
ones(3, 3) <span style="color: gray"><em>or</em></span> ones(3)</td><td rowspan="1" colspan="1">matrix(0, 3, 3)<br />
matrix(1, 3, 3)</td><td rowspan="1" colspan="1">np.matrix(np.ones([3, 3]))<br />
np.matrix(np.zeros([3, 3]))</td><td rowspan="1" colspan="1">zeros(Float64, (3, 3))<br />
ones(Float64, (3, 3))</td></tr><tr><td rowspan="1" colspan="1"><a name="diagonal-matrices" shape="rect" id="diagonal-matrices"></a><a href="numerical-analysis2#diagonal-matrices-note" shape="rect">diagonal matrices</a><br />
<span style="color: gray"><em>and identity</em></span></td><td rowspan="1" colspan="1">diag([1, 2, 3])<br />
<span style="color: gray">% 3x3 identity:</span><br />
eye(3)</td><td rowspan="1" colspan="1">diag(c(1, 2, 3)<br />
<span style="color: gray"># 3x3 identity:</span><br />
diag(3)</td><td rowspan="1" colspan="1">np.diag([1, 2, 3])<br />
np.identity(3)</td><td rowspan="1" colspan="1">diagm([1, 2, 3])<br />
eye(3)</td></tr><tr><td rowspan="1" colspan="1"><a name="matrix-formula" shape="rect" id="matrix-formula"></a><a href="numerical-analysis2#matrix-formula-note" shape="rect">matrix by formula</a></td><td rowspan="1" colspan="1">i = ones(10, 1) * (1:10)<br />
j = (1:10)' * ones(1, 10)<br />
<span style="color: gray">% use component-wise ops only:</span><br />
1 ./ (i + j - 1)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="matrix-dim" shape="rect" id="matrix-dim"></a><a href="numerical-analysis2#matrix-dim-note" shape="rect">dimensions</a></td><td rowspan="1" colspan="1">rows(A)<br />
columns(A)</td><td rowspan="1" colspan="1">dim(A)[1]<br />
dim(A)[2]</td><td rowspan="1" colspan="1">nrows, ncols = A.shape</td><td rowspan="1" colspan="1">nrows, ncols = size([1 2 3; 4 5 6])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-access" shape="rect">element access</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">A(1, 1)</td><td rowspan="1" colspan="1">A[1, 1]</td><td rowspan="1" colspan="1">A[0, 0]</td><td rowspan="1" colspan="1">A[1, 1]</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-row-access" shape="rect">row access</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">A(1, 1:2)</td><td rowspan="1" colspan="1">A[1, ]</td><td rowspan="1" colspan="1">A[0]</td><td rowspan="1" colspan="1">A[1, :]</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-column-access" shape="rect">column access</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">A(1:2, 1)</td><td rowspan="1" colspan="1">A[, 1]</td><td rowspan="1" colspan="1">A[:, 0]</td><td rowspan="1" colspan="1">A[:, 1]</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#submatrix-access" shape="rect">submatrix access</a></td><td rowspan="1" colspan="1">C = [1, 2, 3; 4, 5, 6; 7, 8, 9]<br />
C(1:2, 1:2)</td><td rowspan="1" colspan="1">C = matrix(seq(1, 9), 3, 3, byrow=T)<br />
C[1:2, 1:2]</td><td rowspan="1" colspan="1">A = np.matrix(range(1, 10)).reshape(3, 3)<br />
A[:2, :2]</td><td rowspan="1" colspan="1">reshape(1:9, 3, 3)[1:2, 1:2]</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-scalar-multiplication" shape="rect">scalar multiplication</a></td><td rowspan="1" colspan="1">3 * A<br />
A * 3<br />
<span style="color: gray"><em>also:</em></span><br />
3 .* A<br />
A .* 3</td><td rowspan="1" colspan="1">3 * A<br />
A * 3</td><td rowspan="1" colspan="1">3 * A<br />
A * 3</td><td rowspan="1" colspan="1">3 * [1 2; 3 4]<br />
[1 2; 3 4] * 3</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-element-wise-operators" shape="rect">element-wise operators</a></td><td rowspan="1" colspan="1">.+ .- .* ./</td><td rowspan="1" colspan="1">+ - * /</td><td rowspan="1" colspan="1">+ - np.multiply() np.divide()</td><td rowspan="1" colspan="1">+ - .* ./</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-multiplication" shape="rect">multiplication</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">A %*% B</td><td rowspan="1" colspan="1">np.dot(A, B)</td><td rowspan="1" colspan="1">A * B</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-power" shape="rect">power</a></td><td rowspan="1" colspan="1">A ^ 3<br />
<br />
<span style="color: gray">% power of each entry:</span><br />
A .^ 3</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">A ** 3</td><td rowspan="1" colspan="1">A ^ 3<br />
<br />
<span style="color: gray"># power of each entry:</span><br />
A .^ 3</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#kronecker-product" shape="rect">kronecker product</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">kron(A, B)</td><td rowspan="1" colspan="1">kronecker(A, B)</td><td rowspan="1" colspan="1">np.kron(A, B)</td><td rowspan="1" colspan="1">kron(A, B)</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-comparison" shape="rect">comparison</a></td><td rowspan="1" colspan="1">all(all(A == B))<br />
any(any(A ~= B))</td><td rowspan="1" colspan="1">all(A == B)<br />
any(A != B)</td><td rowspan="1" colspan="1">np.all(A == B)<br />
np.any(A != B)</td><td rowspan="1" colspan="1">A == B<br />
A != B</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-norms" shape="rect">norms</a></td><td rowspan="1" colspan="1">norm(A, 1)<br />
norm(A, 2)<br />
norm(A, Inf)<br />
norm(A, 'fro')</td><td rowspan="1" colspan="1">norm(A, "1")<br />
<span style="color: gray"><em>??</em></span><br />
norm(A, "I")<br />
norm(A, "F")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">norm(A, 1)<br />
norm(A, 2)<br />
norm(A, Inf)<br />
<span style="color: gray"># Froebenius norm:</span><br />
vecnorm(A, 2)</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-transpose" shape="rect">transpose</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">transpose(A)</td><td rowspan="1" colspan="1">t(A)</td><td rowspan="1" colspan="1">A.transpose()</td><td rowspan="1" colspan="1">transpose([1 2; 3 4])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-conjugate-transpose" shape="rect">conjugate transpose</a></td><td rowspan="1" colspan="1">A = [1i, 2i; 3i, 4i]<br />
A'</td><td rowspan="1" colspan="1">A = matrix(c(1i, 2i, 3i, 4i), nrow=2, byrow=T)<br />
Conj(t(A))</td><td rowspan="1" colspan="1">A = np.matrix([[1j, 2j], [3j, 4j]])<br />
A.conj().transpose()</td><td rowspan="1" colspan="1">[1im 2im; 3im 4im]'<br />
ctranspose([1im 2im; 3im 4im])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-inverse" shape="rect">inverse</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">inv(A)</td><td rowspan="1" colspan="1">solve(A)</td><td rowspan="1" colspan="1">np.linalg.inv(A)</td><td rowspan="1" colspan="1">inv([1 2; 3 4])</td></tr><tr><td rowspan="1" colspan="1"><a name="pseudoinverse" shape="rect" id="pseudoinverse"></a><a href="numerical-analysis2#pseudoinverse-note" shape="rect">pseudoinverse</a></td><td rowspan="1" colspan="1">A = [0 1; 0 0]<br />
<br />
pinv(A)</td><td rowspan="1" colspan="1">install.packages('corpcor')<br />
library(corpcor)<br />
<br />
A = matrix(c(0, 0, 1, 0), nrow=2)<br />
pseudoinverse(A)</td><td rowspan="1" colspan="1">A = np.matrix([[0, 1], [0, 0]])<br />
<br />
np.linalg.pinv(A)</td><td rowspan="1" colspan="1">pinv([0 1; 0 0])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-determinant" shape="rect">determinant</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">det(A)</td><td rowspan="1" colspan="1">det(A)</td><td rowspan="1" colspan="1">np.linalg.det(A)</td><td rowspan="1" colspan="1">det(1 2; 3 4])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-trace" shape="rect">trace</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">trace(A)</td><td rowspan="1" colspan="1">sum(diag(A))</td><td rowspan="1" colspan="1">A.trace()</td><td rowspan="1" colspan="1">trace([1 2; 3 4])</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-eigenvalues" shape="rect">eigenvalues</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1">eig(A)</td><td rowspan="1" colspan="1">eigen(A)$values</td><td rowspan="1" colspan="1">np.linalg.eigvals(A)</td><td rowspan="1" colspan="1">eigvals(A)</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-eigenvectors" shape="rect">eigenvectors</a></td><td rowspan="1" colspan="1">[evec, eval] = eig(A)<br />
<span style="color: gray">% each column of evec is an eigenvector</span><br />
<span style="color: gray">% eval is a diagonal matrix of eigenvalues</span></td><td rowspan="1" colspan="1">eigen(A)$vectors</td><td rowspan="1" colspan="1">np.linalg.eig(A)[1]</td><td rowspan="1" colspan="1">eigvecs(A)</td></tr><tr><td rowspan="1" colspan="1"><a name="svd" shape="rect" id="svd"></a><a href="numerical-analysis2#svd-note" shape="rect">singular value decomposition</a></td><td rowspan="1" colspan="1">X = randn(10)<br />
<br />
[u, d, v] = svd(X)</td><td rowspan="1" colspan="1">X = matrix(rnorm(100), nrow=10)<br />
result = svd(X)<br />
<br />
<span style="color: gray"># singular values:</span><br />
result$d<br />
<br />
<span style="color: gray"># matrix of eigenvectors:</span><br />
result$u<br />
<br />
<span style="color: gray"># unitary matrix:</span><br />
result$v</td><td rowspan="1" colspan="1">np.linalg.svd(np.random.randn(100).reshape(10, 10))</td><td rowspan="1" colspan="1">X = randn(10, 10)<br />
<br />
u, s, v = svds(X)</td></tr><tr><td rowspan="1" colspan="1"><a href="numerical-analysis2#matrix-solution" shape="rect">solve system of equations</a></td><td rowspan="1" colspan="1">A \ [2;3]</td><td rowspan="1" colspan="1">solve(A, c(2, 3))</td><td rowspan="1" colspan="1">np.linalg.solve(A, [2, 3])</td><td rowspan="1" colspan="1">[1 2; 3 4] \ [2; 3]</td></tr><tr><th colspan="5" rowspan="1"><a name="sparse-matrices" shape="rect" id="sparse-matrices"></a><a href="numerical-analysis2#sparse-matrices-note" shape="rect">sparse matrices</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-construction" shape="rect" id="sparse-matrix-construction"></a><a href="numerical-analysis2#sparse-matrix-construction-note" shape="rect">sparse matrix construction</a></td><td rowspan="1" colspan="1"><span style="color: gray">% 100x100 matrix with 5 at (1, 1) and 4 at (2, 2):</span><br />
X = sparse([1 2], [1 2], [5 4], 100, 100)</td><td rowspan="1" colspan="1">X = spMatrix(100, 100, c(1, 2), c(1, 2), c(5, 4))</td><td rowspan="1" colspan="1">import scipy.sparse as sparse<br />
<br />
row, col, val = [5, 4], [1, 2], [1, 2]<br />
X = sparse.coo_matrix((val, (row, col)), shape=(100, 100))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-decomposition" shape="rect" id="sparse-matrix-decomposition"></a><a href="numerical-analysis2#sparse-matrix-decomposition-note" shape="rect">sparse matrix decomposition</a></td><td rowspan="1" colspan="1">[rows, cols, vals] = find(X)<br />
<br />
<span style="color: gray">% just the values:</span><br />
nonzeros(X)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-identity-matrix" shape="rect" id="sparse-identity-matrix"></a><a href="numerical-analysis2#sparse-identity-matrix-note" shape="rect">sparse identity matrix</a></td><td rowspan="1" colspan="1"><span style="color: gray">% 100x100 identity:</span><br />
speye(100)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">sparse.identity(100)<br />
<br />
<span style="color: gray"># not square; ones on diagonal:</span><br />
sparse.eye(100, 200)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="dense-matrix-to-sparse-matrix" shape="rect" id="dense-matrix-to-sparse-matrix"></a><a href="numerical-analysis2#dense-matrix-to-sparse-matrix-note" shape="rect">dense matrix to sparse matrix</a><br />
<span style="color: gray"><em>and back</em></span></td><td rowspan="1" colspan="1">X = sparse([1 0 0; 0 0 0; 0 0 0])<br />
X2 = full(X)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">imoprt scipy.sparse as sparse<br />
<br />
A = np.array([[1, 0, 0], [0, 0, 0], [0, 0, 0]])<br />
X = sparse.coo_matrix(A)<br />
X2 = X.todense()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="sparse-matrix-storage" shape="rect" id="sparse-matrix-storage"></a><a href="numerical-analysis2#sparse-matrix-storage-note" shape="rect">sparse matrix storage</a></td><td rowspan="1" colspan="1"><span style="color: gray">% is storage sparse:</span><br />
issparse(X)<br />
<br />
<span style="color: gray">% memory allocation in bytes:</span><br />
nzmax(X)<br />
<br />
<span style="color: gray">% number of nonzero entries:</span><br />
nnz(X)</td><td rowspan="1" colspan="1"><span style="color: gray"># memory allocation in bytes:</span><br />
object.size(X)</td><td rowspan="1" colspan="1">import scipy.sparse as sparse<br />
<br />
sparse.issparse(X)</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="optimization" shape="rect" id="optimization"></a><a href="numerical-analysis2#optimization-note" shape="rect">optimization</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="linear-min" shape="rect" id="linear-min"></a><a href="numerical-analysis2#linear-min-note" shape="rect">linear minimization</a></td><td rowspan="1" colspan="1"><span style="color: gray">% download and install cvx:</span><br />
cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x1;<br />
<span style="white-space: pre-wrap;">  </span>variable x2;<br />
<span style="white-space: pre-wrap;">  </span>variable x3;<br />
<span style="white-space: pre-wrap;">  </span>minimize x1 + x2 + x3;<br />
<span style="white-space: pre-wrap;">  </span>subject to<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x1 + x2 &gt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x2 + x3 &gt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x1 + x3 &gt;= 1;<br />
cvx_end;<br />
<br />
<span style="color: gray">% 'Solved' in cvx_status</span><br />
<span style="color: gray">% argmin in x1, x2, x3</span><br />
<span style="color: gray">% minval in cvx_optval</span></td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 0, 0, 1, 1, 1, 0, 1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=3, byrow=T)<br />
dir = c("&gt;=", "&gt;=", "&gt;=")<br />
rhs = c(1, 1, 1)<br />
result = lp("min", obj, A, dir, rhs)<br />
<br />
<span style="color: gray"># 0 in result$status</span><br />
<span style="color: gray"># argmin in result$solution</span><br />
<span style="color: gray"># minval in result$objval</span></td><td rowspan="1" colspan="1"><span style="color: gray"># sudo pip install cvxopt</span><br />
from cvxopt.modeling import *<br />
<br />
x1 = variable(1, 'x1')<br />
x2 = variable(1, 'x2')<br />
x3 = variable(1, 'x3')<br />
c1 = (x1 + x2 &gt;= 1)<br />
c2 = (x1 + x3 &gt;= 1)<br />
c3 = (x2 + x3 &gt;= 1)<br />
lp = op(x1 + x2 + x3, [c1, c2, c3])<br />
lp.solve()<br />
<br />
<span style="color: gray"># 'optimal' in lp.status</span><br />
<span style="color: gray"># argmin in x1.value[0], x2.value[0],<br />
#<span style="white-space: pre-wrap;">   </span>x3.value[0]</span><br />
<span style="color: gray"># minval in lp.objective.value()[0]</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="decision-var-vec" shape="rect" id="decision-var-vec"></a><a href="numerical-analysis2#decision-var-vec-note" shape="rect">decision variable vector</a></td><td rowspan="1" colspan="1">cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x(3);<br />
<span style="white-space: pre-wrap;">  </span>minimize sum(x);<br />
<span style="white-space: pre-wrap;">  </span>subject to<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(2) &gt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(2) + x(3) &gt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(3) &gt;= 1;<br />
cvx_end;</td><td rowspan="1" colspan="1"><span style="color: gray"># decision variables must be an array</span></td><td rowspan="1" colspan="1"><span style="color: gray"># sudo pip install cvxopt</span><br />
from cvxopt.modeling import *<br />
<br />
x = variable(3, 'x')<br />
c1 = (x[0] + x[1] &gt;= 1)<br />
c2 = (x[0] + x[2] &gt;= 1)<br />
c3 = (x[1] + x[2] &gt;= 1)<br />
lp = op(x[0] + x[1] + x[2], [c1, c2, c3])<br />
lp.solve()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="linear-max" shape="rect" id="linear-max"></a><a href="numerical-analysis2#linear-max-note" shape="rect">linear maximization</a></td><td rowspan="1" colspan="1">cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x(3);<br />
<span style="white-space: pre-wrap;">  </span>maximize sum(x);<br />
<span style="white-space: pre-wrap;">  </span>subject to<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(2) &lt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(2) + x(3) &lt;= 1;<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(3) &lt;= 1;<br />
cvx_end;</td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 0, 0, 1, 1, 1, 0, 1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=3, byrow=T)<br />
dir = c("&lt;=", "&lt;=", "&lt;=")<br />
rhs = c(1, 1, 1)<br />
result = lp("max", obj, A, dir, rhs)</td><td rowspan="1" colspan="1"><span style="color: gray"># None; negate objective function before<br />
# solving; negate optimal value which<br />
# is found.</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="var-declaration-constraint" shape="rect" id="var-declaration-constraint"></a><a href="numerical-analysis2#var-declaration-constraint-note" shape="rect">constraint in variable declaration</a></td><td rowspan="1" colspan="1">cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x(3) nonnegative;<br />
<span style="white-space: pre-wrap;">  </span>minimize 10*x(1) + 5*x(2) + 4*x(3);<br />
<span style="white-space: pre-wrap;">  </span>subject to<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(2) + x(3) &gt;= 10;<br />
cvx_end</td><td rowspan="1" colspan="1"><span style="color: gray"># none; but note that variables are assumed<br />
# to be nonnegative</span></td><td rowspan="1" colspan="1"><span style="color: gray"># none</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="opt-unbounded-behavior" shape="rect" id="opt-unbounded-behavior"></a><a href="numerical-analysis2#opt-unbounded-behavior-note" shape="rect">unbounded behavior</a></td><td rowspan="1" colspan="1">cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x(3);<br />
<span style="white-space: pre-wrap;">  </span>maximize sum(x);<br />
cvx_end<br />
<br />
<span style="color: gray">% Inf in cvx_optval</span><br />
<span style="color: gray">% 'Unbounded' in cvx_status</span></td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 1), nrow=1, byrow=T)<br />
dir = c("&gt;=")<br />
rhs = c(1)<br />
result = lp("max", obj, A, dir, rhs)<br />
<br />
<span style="color: gray"># result$status is 3</span></td><td rowspan="1" colspan="1"><span style="color: gray"># sudo pip install cvxopt</span><br />
from cvxopt.modeling import *<br />
<br />
x = variable(3, 'x')<br />
c1 = (x[0] &gt;= 0)<br />
c2 = (x[1] &gt;= 0)<br />
c3 = (x[2] &lt;= 0)<br />
lp = op(x[0] + x[1] + x[2], [c1, c2, c3])<br />
lp.solve()<br />
<br />
<span style="color: gray"># lp.status is 'dual infeasible'</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="opt-infeasible-behavior" shape="rect" id="opt-infeasible-behavior"></a><a href="numerical-analysis2#opt-infeasible-behavior-note" shape="rect">infeasible behavior</a></td><td rowspan="1" colspan="1">cvx_begin<br />
<span style="white-space: pre-wrap;">  </span>variable x(3) nonnegative;<br />
<span style="white-space: pre-wrap;">  </span>maximize sum(x);<br />
<span style="white-space: pre-wrap;">  </span>subject to<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>x(1) + x(2) + x(3) &lt; -1;<br />
cvx_end<br />
<br />
<span style="color: gray">% -Inf in cvx_optval</span><br />
<span style="color: gray">% 'Infeasible' in cvx_status</span></td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 1), nrow=1, byrow=T)<br />
dir = c("&lt;=")<br />
rhs = c(-1)<br />
result = lp("min", obj, A, dir, rhs)<br />
<br />
<span style="color: gray"># result$status is 2</span></td><td rowspan="1" colspan="1"><span style="color: gray"># sudo pip install cvxopt</span><br />
from cvxopt.modeling import *<br />
<br />
x = variable(3, 'x')<br />
c1 = (x[0] &gt;= 0)<br />
c2 = (x[1] &gt;= 0)<br />
c3 = (x[2] &gt;= 0)<br />
c4 = (x[0] + x[1] + x[2] &lt;= -1)<br />
lp = op(x[0] + x[1] + x[2], [c1, c2, c3, c4])<br />
lp.solve()<br />
<br />
<span style="color: gray"># lp.status is 'primal infeasible'</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="int-decision-var" shape="rect" id="int-decision-var"></a><a href="numerical-analysis2#int-decision-var-note" shape="rect">integer decision variable</a></td><td rowspan="1" colspan="1"><span style="color: gray">% requires Optimization Toolbox:</span><br />
f = [1 1 1]<br />
A = [-1 -1 0; -1 0 -1; 0 -1 -1;<br />
<span style="white-space: pre-wrap;">     </span>-1 0 0; 0 -1 0; 0 0 -1]<br />
b = [-1 -1 -1 0 0 0]<br />
<span style="color: gray">% 2nd arg indicates integer vars</span><br />
[x opt flag] = intlinprog(f, [1 1 1], A, b)<br />
<br />
<span style="color: gray">% if solution found, flag is 1</span><br />
<span style="color: gray">% x is argmin</span><br />
<span style="color: gray">% opt is optimal value</span></td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 0, 0, 1, 1, 1, 0, 1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=3, byrow=T)<br />
dir = c("&gt;=", "&gt;=", "&gt;=")<br />
rhs = c(1, 1, 1)<br />
result = lp("min", obj, A, dir, rhs,<br />
<span style="white-space: pre-wrap;">  </span>int.vec=c(1, 1, 1))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="binary-decision-var" shape="rect" id="binary-decision-var"></a><a href="numerical-analysis2#binary-decision-var-note" shape="rect">binary decision variable</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># install.packages('lpSolve')</span><br />
require(lpSolve)<br />
<br />
obj = c(1, 1, 1)<br />
A = matrix(c(1, 1, 0, 0, 1, 1, 1, 0, 1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=3, byrow=T)<br />
dir = c("&gt;=", "&gt;=", "&gt;=")<br />
rhs = c(1, 1, 1)<br />
result = lp("min", obj, A, dir, rhs,<br />
<span style="white-space: pre-wrap;">  </span>binary.vec=c(1, 1, 1))</td><td rowspan="1" colspan="1"><span style="color: gray"># integer solver not provided by default</span></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="polynomials" shape="rect" id="polynomials"></a><a href="numerical-analysis2#polynomials-note" shape="rect">polynomials</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">exact polynomial fit</td><td rowspan="1" colspan="1">x = [1 2 3 4]<br />
y = [3 9 2 1]<br />
<span style="color: gray">% polynomial coefficient array:</span><br />
p = polyfit(x, y, 3)<br />
<br />
<span style="color: gray">% plot polynomial:</span><br />
xx = -10:.1:10<br />
yy = polyval(p, xx)<br />
plot(xx, yy)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">exact polynomial fit with derivative values</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">piecewise polynomial fit</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="cubic-spline" shape="rect" id="cubic-spline"></a><img src="http://cdn.hyperpolyglot.org/images/cubic-spline.jpg" alt="cubic-spline.jpg" class="image" /><br />
<a href="numerical-analysis2#cubic-spline-note" shape="rect">cubic spline</a></td><td rowspan="1" colspan="1">f = spline(1:20, normrnd(0, 1, 1, 20))<br />
x = 1:.1:20<br />
plot(x, ppval(f, x))</td><td rowspan="1" colspan="1">f = splinefun(rnorm(20))<br />
x = seq(1, 20, .1)<br />
plot(x, f(x), type="l")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">underdetermined polynomail fit</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">overdetermined polynomial fit</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">multivariate polynomial fit</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="descriptive-statistics" shape="rect" id="descriptive-statistics"></a><a href="numerical-analysis2#descriptive-statistics-note" shape="rect">descriptive statistics</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="first-moment-stats" shape="rect" id="first-moment-stats"></a><a href="numerical-analysis2#first-moment-stats-note" shape="rect">first moment statistics</a></td><td rowspan="1" colspan="1">x = [1 2 3 8 12 19]<br />
<br />
sum(x)<br />
mean(x)</td><td rowspan="1" colspan="1">x = c(1,2,3,8,12,19)<br />
<br />
sum(x)<br />
mean(x)</td><td rowspan="1" colspan="1">x = [1,2,3,8,12,19]<br />
<br />
sp.sum(x)<br />
sp.mean(x)</td><td rowspan="1" colspan="1">x = [1 2 3 8 12 19]<br />
<br />
sum(x)<br />
mean(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="second-moment-stats" shape="rect" id="second-moment-stats"></a><a href="numerical-analysis2#second-moment-stats-note" shape="rect">second moment statistics</a></td><td rowspan="1" colspan="1">std(x, 1)<br />
var(x, 1)</td><td rowspan="1" colspan="1">n = length(x)<br />
<br />
sd(x) * sqrt((n-1)/n)<br />
var(x) * (n-1)/n</td><td rowspan="1" colspan="1">sp.std(x)<br />
sp.var(x)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="second-moment-stats-sample" shape="rect" id="second-moment-stats-sample"></a><a href="numerical-analysis2#second-moment-stats-sample-note" shape="rect">second moment statistics for samples</a></td><td rowspan="1" colspan="1">std(x)<br />
var(x)</td><td rowspan="1" colspan="1">sd(x)<br />
var(x)</td><td rowspan="1" colspan="1">n = float(len(x))<br />
<br />
sp.std(x) * math.sqrt(n/(n-1))<br />
sp.var(x) * n/(n-1)</td><td rowspan="1" colspan="1">std(x)<br />
var(x)</td></tr><tr><td rowspan="1" colspan="1"><a name="skewness" shape="rect" id="skewness"></a><a href="numerical-analysis2#skewness-note" shape="rect">skewness</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Octave uses sample standard deviation to compute skewness:</em></span><br />
skewness(x)</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br />
<br />
skewness(x)</td><td rowspan="1" colspan="1">stats.skew(x)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="kurtosis" shape="rect" id="kurtosis"></a><a href="numerical-analysis2#kurtosis-note" shape="rect">kurtosis</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Octave uses sample standard deviation to compute kurtosis:</em></span><br />
kurtosis(x)</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br />
<br />
kurtosis(x) - 3</td><td rowspan="1" colspan="1">stats.kurtosis(x)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="nth-moment" shape="rect" id="nth-moment"></a><a href="numerical-analysis2#nth-moment-note" shape="rect">nth moment and nth central moment</a></td><td rowspan="1" colspan="1">n = 5<br />
<br />
moment(x, n)<br />
moment(x, n, "c")</td><td rowspan="1" colspan="1">install.packages('moments')<br />
library('moments')<br />
<br />
n = 5<br />
moment(x, n)<br />
moment(x, n, central=T)</td><td rowspan="1" colspan="1">n = 5<br />
<br />
<span style="color: gray"><em>??</em></span><br />
stats.moment(x, n)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="mode" shape="rect" id="mode"></a><a href="numerical-analysis2#mode-note" shape="rect">mode</a></td><td rowspan="1" colspan="1">mode([1 2 2 2 3 3 4])</td><td rowspan="1" colspan="1">samp = c(1,2,2,2,3,3,4)<br />
names(sort(-table(samp)))[1]</td><td rowspan="1" colspan="1">stats.mode([1,2,2,2,3,3,4])[0][0]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="quantile-stats" shape="rect" id="quantile-stats"></a><a href="numerical-analysis2#quantile-stats-note" shape="rect">quantile statistics</a></td><td rowspan="1" colspan="1">min(x)<br />
median(x)<br />
max(x)<br />
iqr(x)<br />
quantile(x, .90)</td><td rowspan="1" colspan="1">min(x)<br />
median(x)<br />
max(x)<br />
IQR(x)<br />
quantile(x, prob=.90)</td><td rowspan="1" colspan="1">min(x)<br />
sp.median(x)<br />
max(x)<br />
<span style="color: gray"><em>??</em></span><br />
stats.scoreatpercentile(x, 90.0)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bivariate-stats" shape="rect" id="bivariate-stats"></a><a href="numerical-analysis2#bivariate-stats-note" shape="rect">bivariate statistiscs</a><br />
<span style="color: gray"><em>correlation, covariance</em></span></td><td rowspan="1" colspan="1">x = [1 2 3]<br />
y = [2 4 7]<br />
<br />
cor(x, y)<br />
cov(x, y)</td><td rowspan="1" colspan="1">x = c(1,2,3)<br />
y = c(2,4,7)<br />
<br />
cor(x, y)<br />
cov(x, y)</td><td rowspan="1" colspan="1">x = [1,2,3]<br />
y = [2,4,7]<br />
<br />
stats.linregress(x, y)[2]<br />
<span style="color: gray"><em>??</em></span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="correlation-matrix" shape="rect" id="correlation-matrix"></a><a href="numerical-analysis2#correlation-matrix-note" shape="rect">correlation matrix</a></td><td rowspan="1" colspan="1">x1 = randn(100, 1)<br />
x2 = 0.5 * x1 + randn(100, 1)<br />
x3 = 0.1 * x1 + 0.1 * x2 + 0.1 * randn(100, 1)<br />
<br />
corr([x1 x2 x3])</td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = x1 + 0.5 * rnorm(100)<br />
x3 = 0.3 * x1 + 0.1 * 2 + 0.1 * rnorm(100)<br />
<br />
cor(cbind(x1, x2, x3))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="freq-table" shape="rect" id="freq-table"></a><a href="numerical-analysis2#freq-table-note" shape="rect">data set to frequency table</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = c(1,2,1,1,2,5,1,2,7)<br />
tab = table(x)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="invert-freq-table" shape="rect" id="invert-freq-table"></a><a href="numerical-analysis2#invert-freq-table-note" shape="rect">frequency table to data set</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">rep(as.integer(names(tab)),<br />
<span style="white-space: pre-wrap;">  </span>unname(tab))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bin" shape="rect" id="bin"></a><a href="numerical-analysis2#bin-note" shape="rect">bin</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = c(1.1, 3.7, 8.9, 1.2, 1.9, 4.1)<br />
xf = cut(x, breaks=c(0, 3, 6, 9))<br />
<span style="color: gray"># bins are (0, 3], (3, 6], and (6, 9]:</span><br />
bins = tapply(x, xf, length)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="distributions" shape="rect" id="distributions"></a><a href="numerical-analysis2#distribution-note" shape="rect">distributions</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="binomial" shape="rect" id="binomial"></a><a href="numerical-analysis2#binomial-note" shape="rect">binomial</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">binopdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binocdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binoinv(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
binornd(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dbinom(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
pbinom(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
qbinom(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
rbinom(10, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)</td><td rowspan="1" colspan="1">stats.binom.pmf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.cdf(x, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.ppf(y, <span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)<br />
stats.binom.rvs(<span style="color: gray"><em>n</em></span>, <span style="color: gray"><em>p</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="poisson" shape="rect" id="poisson"></a><a href="numerical-analysis2#poisson-note" shape="rect">poisson</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">poisspdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
poisscdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
poissinv(y, <span style="color: gray"><em>lambda</em></span>)<br />
poissrnd(<span style="color: gray"><em>lambda</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dpois(x, <span style="color: gray"><em>lambda</em></span>)<br />
ppois(x, <span style="color: gray"><em>lambda</em></span>)<br />
qpois(y, <span style="color: gray"><em>lambda</em></span>)<br />
rpois(10, <span style="color: gray"><em>lambda</em></span>)</td><td rowspan="1" colspan="1">stats.poisson.pmf(x, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.cdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.ppf(y, <span style="color: gray"><em>lambda</em></span>)<br />
stats.poisson.rvs(<span style="color: gray"><em>lambda</em></span>, size=1)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="normal" shape="rect" id="normal"></a><a href="numerical-analysis2#normal-note" shape="rect">normal</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">normpdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
normcdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
norminv(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
normrnd(<span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dnorm(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
pnorm(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
qnorm(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
rnorm(10, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)</td><td rowspan="1" colspan="1">stats.norm.pdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.cdf(x, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.ppf(y, <span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)<br />
stats.norm.rvs(<span style="color: gray"><em>mu</em></span>, <span style="color: gray"><em>sigma</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="gamma" shape="rect" id="gamma"></a><a href="numerical-analysis2#gamma-note" shape="rect">gamma</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">gampdf(x, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gamcdf(x, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gaminv(y, <span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>)<br />
gamrnd(<span style="color: gray"><em>k</em></span>, <span style="color: gray"><em>theta</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dgamma(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
pgamma(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
qgamma(y, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
rgamma(10, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)</td><td rowspan="1" colspan="1">stats.gamma.pdf(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.cdf(x, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.ppf(y, <span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)<br />
stats.gamma.rvs(<span style="color: gray"><em>k</em></span>, scale=<span style="color: gray"><em>theta</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="exponential" shape="rect" id="exponential"></a><a href="numerical-analysis2#exponential-note" shape="rect">exponential</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">exppdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
expcdf(x, <span style="color: gray"><em>lambda</em></span>)<br />
expinv(y, <span style="color: gray"><em>lambda</em></span>)<br />
exprnd(<span style="color: gray"><em>lambda</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dexp(x, <span style="color: gray"><em>lambda</em></span>)<br />
pexp(x, <span style="color: gray"><em>lambda</em></span>)<br />
qexp(y, <span style="color: gray"><em>lambda</em></span>)<br />
rexp(10, <span style="color: gray"><em>lambda</em></span>)</td><td rowspan="1" colspan="1">stats.expon.pdf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.cdf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.ppf(x, scale=1.0/<span style="color: gray"><em>lambda</em></span>)<br />
stats.expon.rvs(scale=1.0/<span style="color: gray"><em>lambda</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="chi-squared" shape="rect" id="chi-squared"></a><a href="numerical-analysis2#chi-squared-note" shape="rect">chi-squared</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">chi2pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
chi2cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
chi2inv(y, <span style="color: gray"><em>nu</em></span>)<br />
chi2rnd(<span style="color: gray"><em>nu</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dchisq(x, <span style="color: gray"><em>nu</em></span>)<br />
pchisq(x, <span style="color: gray"><em>nu</em></span>)<br />
qchisq(y, <span style="color: gray"><em>nu</em></span>)<br />
rchisq(10, <span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1">stats.chi2.pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.ppf(y, <span style="color: gray"><em>nu</em></span>)<br />
stats.chi2.rvs(<span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="beta" shape="rect" id="beta"></a><a href="numerical-analysis2#beta-note" shape="rect">beta</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">betapdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betacdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betainvf(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
betarnd(<span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dbeta(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
pbeta(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
qbeta(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
rbeta(10, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)</td><td rowspan="1" colspan="1">stats.beta.pdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.cdf(x, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.ppf(y, <span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)<br />
stats.beta.pvs(<span style="color: gray"><em>alpha</em></span>, <span style="color: gray"><em>beta</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="uniform" shape="rect" id="uniform"></a><a href="numerical-analysis2#uniform-note" shape="rect">uniform</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">unifpdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifcdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifinv(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
unifrnd(<span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dunif(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
punif(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
qunif(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
runif(10, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)</td><td rowspan="1" colspan="1">stats.uniform.pdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.uniform.cdf(x, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.uniform.ppf(y, <span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)<br />
stats.unifrom.rvs(<span style="color: gray"><em>a</em></span>, <span style="color: gray"><em>b</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="students-t" shape="rect" id="students-t"></a><a href="numerical-analysis2#students-t-note" shape="rect">Student's t</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">tpdf(x, <span style="color: gray"><em>nu</em></span>)<br />
tcdf(x, <span style="color: gray"><em>nu</em></span>)<br />
tinv(y, <span style="color: gray"><em>nu</em></span>)<br />
trnd(<span style="color: gray"><em>nu</em></span>, 1, 10)</td><td rowspan="1" colspan="1">dt(x, <span style="color: gray"><em>nu</em></span>)<br />
pt(x, <span style="color: gray"><em>nu</em></span>)<br />
qt(y, <span style="color: gray"><em>nu</em></span>)<br />
rt(10, <span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1">stats.t.pdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.cdf(x, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.ppf(y, <span style="color: gray"><em>nu</em></span>)<br />
stats.t.rvs(<span style="color: gray"><em>nu</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="snedecors-f" shape="rect" id="snedecors-f"></a><a href="numerical-analysis2#snedecors-f-note" shape="rect">Snedecor's F</a><br />
<span style="color: gray"><em>density, cumulative, quantile,<br />
sample of 10</em></span></td><td rowspan="1" colspan="1">fpdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
fcdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
finv(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
frnd(<span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>, 1, 10)</td><td rowspan="1" colspan="1">df(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
pf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
qf(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
rf(10, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)</td><td rowspan="1" colspan="1">stats.f.pdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.cdf(x, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.ppf(y, <span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)<br />
stats.f.rvs(<span style="color: gray"><em>d1</em></span>, <span style="color: gray"><em>d2</em></span>)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-density-func" shape="rect" id="empirical-density-func"></a><a href="numerical-analysis2#empirical-density-func-note" shape="rect">empirical density function</a></td><td rowspan="1" colspan="1"><span style="color: gray">% $ apt-get install octave-econometrics</span><br />
<br />
x = (-3:.05:3)'<br />
y = kernel_density(x, normrnd(0, 1, 100, 1))</td><td rowspan="1" colspan="1">dfunc = density(rnorm(100))<br />
<br />
dfunc$x<br />
dfunc$y</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-cumulative-distribution" shape="rect" id="empirical-cumulative-distribution"></a><a href="numerical-analysis2#empirical-cumulative-distribution-note" shape="rect">empirical cumulative distribution</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"><em>F is a right-continuous step function:</em></span><br />
F = ecdf(rnorm(100))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="empirical-quantile-func" shape="rect" id="empirical-quantile-func"></a><a href="numerical-analysis2#empirical-quantile-func-note" shape="rect">empirical quantile function</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">F = ecdf(rnorm(100))<br />
Finv = ecdf(F(seq(0, 1, .01)))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="linear-regression" shape="rect" id="linear-regression"></a><a href="numerical-analysis2#linear-regression-note" shape="rect">linear regression</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="simple-linear-regression" shape="rect" id="simple-linear-regression"></a><a href="numerical-analysis2#simple-linear-regression-note" shape="rect">simple linear regression</a><br />
<span style="color: gray"><em>coefficient, intercept, and residuals</em></span></td><td rowspan="1" colspan="1">x = [1 2 3]<br />
y = [2 4 7]<br />
<br />
[lsq, res] = polyfit(x, y, 1)<br />
a = lsq(1)<br />
b = lsq(2)<br />
y - (a*x+b)</td><td rowspan="1" colspan="1">x = seq(10)<br />
y = 2 * x + 1 + rnorm(10)<br />
<br />
fit = lm(y ~ x)<br />
summary(fit)<br />
<br />
<span style="color: gray"># yhat = ax + b:</span><br />
a = fit$coefficients[2]<br />
b = fit$coefficients[1]<br />
<br />
<span style="color: gray"># y - (ax + b):</span><br />
fit$residuals</td><td rowspan="1" colspan="1">x = np.array([1,2,3])<br />
y = np.array([2,4,7])<br />
<br />
lsq = stats.linregress(x, y)<br />
a = lsq[0]<br />
b = lsq[1]<br />
y - (a*x+b)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="linear-regression-no-intercept" shape="rect" id="linear-regression-no-intercept"></a><a href="numerical-analysis2#linear-regression-no-intercept-note" shape="rect">no intercept</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = seq(10)<br />
y = 2 * x + 1 + rnorm(10)<br />
<br />
fit = lm(y ~ x + 0)<br />
summary(fit)<br />
<br />
<span style="color: gray"># y = ax:</span><br />
a = fit$coefficients[1]</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="multiple-linear-regression" shape="rect" id="multiple-linear-regression"></a><a href="numerical-analysis2#multiple-linear-regression-note" shape="rect">multiple linear regression</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = 2 * x2 + rnorm(100)<br />
<br />
fit = lm(y ~ x1 + x2)<br />
summary(fit)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="linear-regression-interaction" shape="rect" id="linear-regression-interaction"></a><a href="numerical-analysis2#linear-regression-interaction-note" shape="rect">interaction</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = 2 * x1 + x2 + 3 * x1 * x2 + rnorm(100)<br />
<br />
<span style="color: gray"># x1, x2, and x1*x2 as predictors:</span><br />
fit = lm(y ~ x1 * x2)<br />
summary(fit)<br />
<br />
<span style="color: gray"># just x1*x2 as predictor:</span><br />
fit2 = lm(Y ~ x1:x2)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="logistic-regression" shape="rect" id="logistic-regression"></a><a href="numerical-analysis2#logistic-regression-note" shape="rect">logistic regression</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">y = round(runif(100))<br />
x1 = round(runif(100))<br />
x2 = y + rnorm(100)<br />
<br />
fit = glm(y ~ x1 + x2, family="binomial")<br />
summary(fit)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="statistical-tests" shape="rect" id="statistical-tests"></a><a href="numerical-analysis2#statistical-tests-note" shape="rect">statistical tests</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="wilcoxon" shape="rect" id="wilcoxon"></a><a href="numerical-analysis2#wilcoxon-note" shape="rect">wilcoxon signed-rank test</a><br />
<span style="color: gray"><em>variable is symmetric around zero</em></span></td><td rowspan="1" colspan="1">x = unifrnd(-0.5, 0.5, 100, 1)<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
wilcoxon_test(x, zeros(100, 1))<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
wilcoxon_test(x + 1.0, zeros(100, 1))</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
wilcox.test(runif(100) - 0.5)<br />
<br />
<span style="color: gray">alternative hypothesis is true:</span><br />
wilcox.test(runif(100) + 0.5)</td><td rowspan="1" colspan="1">stats.wilcoxon()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="kruskal" shape="rect" id="kruskal"></a><a href="numerical-analysis2#kruskal-note" shape="rect">kruskal-wallis rank sum test</a><br />
<span style="color: gray"><em>variables have same location parameter</em></span></td><td rowspan="1" colspan="1">x = unifrnd(0, 1, 200, 1)<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
kruskal_wallis_test(randn(100, 1), randn(200, 1))<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
kruskal_wallis_test(randn(100, 1), x)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
kruskal.test(list(rnorm(100), rnorm(200)))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
kruskal.test(list(rnorm(100), runif(200)))</td><td rowspan="1" colspan="1">stats.kruskal()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="kolmogorov-smirnov-test" shape="rect" id="kolmogorov-smirnov-test"></a><a href="numerical-analysis2#kolmogorov-smirnov-test-note" shape="rect">kolmogorov-smirnov test</a><br />
<span style="color: gray"><em>variables have same distribution</em></span></td><td rowspan="1" colspan="1">x = randn(100, 1)<br />
y1 = randn(100, 1)<br />
y2 = unifrnd(-0.5, 0.5, 100, 1)<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
kolmogorov_smirnov_test_2(x, y1)<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
kolmogorov_smirnov_test_2(x, y2)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
ks.test(rnorm(100), rnorm(100))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
ks.test(rnorm(100), runif(100) - 0.5)</td><td rowspan="1" colspan="1">stats.ks_2samp()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="one-sample-t-test" shape="rect" id="one-sample-t-test"></a><a href="numerical-analysis2#one-sample-t-test-note" shape="rect">one-sample t-test</a><br />
<span style="color: gray"><em>mean of normal variable with unknown variance is zero</em></span></td><td rowspan="1" colspan="1">x1 = 3 * randn(100, 1)<br />
x2 = 3 * randn(100, 1) + 3<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
t_test(x1, 0)<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
t_test(x2, 0)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
t.test(rnorm(100, 0, 3))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
t.test(rnorm(100, 3, 3))</td><td rowspan="1" colspan="1">stats.ttest_1samp()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="independent-two-sample-t-test" shape="rect" id="independent-two-sample-t-test"></a><a href="numerical-analysis2#independent-two-sample-t-test-note" shape="rect">independent two-sample t-test</a><br />
<span style="color: gray"><em>two normal variables have same mean</em></span></td><td rowspan="1" colspan="1">x = randn(100, 1)<br />
y1 = randn(100, 1)<br />
y2 = randn(100, 1) + 1.5<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
t_test_2(x, y1)<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
t_test_2(x, y2)</td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
t.test(rnorm(100), rnorm(100))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
t.test(rnorm(100), rnorm(100, 3))</td><td rowspan="1" colspan="1">stats.ttest_ind()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="one-sample-binomial-test" shape="rect" id="one-sample-binomial-test"></a><a href="numerical-analysis2#one-sample-binomial-test-note" shape="rect">one-sample binomial test</a><br />
<span style="color: gray"><em>binomial variable parameter is as given</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">n = 100<br />
x = rbinom(1, n, 0.5)<br />
<br />
<span style="color: gray"># null hypothesis that p=0.5 is true:</span><br />
binom.test(x, n)<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
binom.test(x, n, p=0.3)</td><td rowspan="1" colspan="1">stats.binom_test()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="two-sample-binomial-test" shape="rect" id="two-sample-binomial-test"></a><a href="numerical-analysis2#two-sample-binomial-test-note" shape="rect">two-sample binomial test</a><br />
<span style="color: gray"><em>parameters of two binomial variables are equal</em></span></td><td rowspan="1" colspan="1">prop_test_2()</td><td rowspan="1" colspan="1">n = 100<br />
x1 = rbinom(1, n, 0.5)<br />
x2 = rbinom(1, n, 0.5)<br />
<br />
<span style="color: gray"># null hypothesis that p=0.5 is true:</span><br />
prop.test(c(x1, x2), c(n, n))<br />
<br />
y = rbinom(1, n, 0.3)<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
prop.test(c(x1, y), c(n, n))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="chi-squared-test" shape="rect" id="chi-squared-test"></a><a href="numerical-analysis2#chi-squared-test-note" shape="rect">chi-squared test</a><br />
<span style="color: gray"><em>parameters of multinomial variable are all equal</em></span></td><td rowspan="1" colspan="1">chisquare_test_independence()</td><td rowspan="1" colspan="1">fair = floor(6 * runif(100)) + 1<br />
loaded = floor(7 * runif(100)) + 1<br />
loaded[which(loaded &gt; 6)] = 6<br />
<br />
<span style="color: gray"># null hypothesis is true:</span><br />
chisq.test(table(fair))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
chisq.test(table(loaded))</td><td rowspan="1" colspan="1">stats.chisquare()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="poisson-test" shape="rect" id="poisson-test"></a><a href="numerical-analysis2#poisson-test-note" shape="rect">poisson test</a><br />
<span style="color: gray"><em>parameter of poisson variable is as given</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
poisson.test(rpois(1, 100), r=100)<br />
<br />
<span style="color: gray"># alternative test is true:</span><br />
poisson.test(rpois(1, 150), r=100)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="f-test" shape="rect" id="f-test"></a><a href="numerical-analysis2#f-test-note" shape="rect">F test</a><br />
<span style="color: gray"><em>ratio of variance of normal variables is as given</em></span></td><td rowspan="1" colspan="1">var_test()</td><td rowspan="1" colspan="1">x = rnorm(100)<br />
y = rnorm(100, 0, sd=sqrt(3))<br />
<br />
<span style="color: gray"># null hypothesis is true:</span><br />
var.test(y, x, ratio=3)<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
var.test(y, x, ratio=1)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="pearson-product-moment-test" shape="rect" id="pearson-product-moment-test"></a><a href="numerical-analysis2#pearson-product-moment-test-note" shape="rect">pearson product moment test</a><br />
<span style="color: gray"><em>normal variables are not correlated</em></span></td><td rowspan="1" colspan="1">cor_test()</td><td rowspan="1" colspan="1">x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
y = x2 + rnorm(100)<br />
<br />
<span style="color: gray"># null hypothesis is true:</span><br />
cor.test(y, x1)<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
cor.test(y, x2)</td><td rowspan="1" colspan="1">stats.pearsonr()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="shapiro-wilk-test" shape="rect" id="shapiro-wilk-test"></a><a href="numerical-analysis2#shapiro-wilk-test-note" shape="rect">shapiro-wilk test</a><br />
<span style="color: gray"><em>variable has normal distribution</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># null hypothesis is true:</span><br />
shapiro.test(rnorm(1000))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
shapiro.test(runif(1000))</td><td rowspan="1" colspan="1">stats.shapiro()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bartletts-test" shape="rect" id="bartletts-test"></a><a href="numerical-analysis2#bartletts-test-note" shape="rect">bartlett's test</a><br />
<span style="color: gray"><em>two or more normal variables have same variance</em></span></td><td rowspan="1" colspan="1">bartlett_test()</td><td rowspan="1" colspan="1">x = rnorm(100)<br />
y1 = rnorm(100)<br />
y2 = 0.1 * rnorm(100)<br />
<br />
<span style="color: gray"># null hypothesis is true:</span><br />
bartlett.test(list(x, y1))<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
bartlett.test(list(x, y))</td><td rowspan="1" colspan="1">stats.bartlett()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="levene-test" shape="rect" id="levene-test"></a><a href="numerical-analysis2#levene-test-note" shape="rect">levene's test</a><br />
<span style="color: gray"><em>two or more variables have same variance</em></span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('reshape', 'car')<br />
library(reshape)<br />
library(car)<br />
<br />
x = rnorm(100)<br />
y1 = rnorm(100)<br />
y2 = 0.1 * rnorm(100)<br />
<br />
<span style="color: gray"># null hypothesis is true:</span><br />
df = melt(data.frame(x, y1))<br />
leveneTest(df$value, df$variable)<br />
<br />
<span style="color: gray"># alternative hypothesis is true:</span><br />
df = melt(data.frame(x, y2))<br />
leveneTest(df$value, df$variable)</td><td rowspan="1" colspan="1">stats.levene()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="one-way-anova" shape="rect" id="one-way-anova"></a><a href="numerical-analysis2#one-way-anova-note" shape="rect">one-way anova</a><br />
<span style="color: gray"><em>two or more normal variables have same mean</em></span></td><td rowspan="1" colspan="1">x1 = randn(100, 1)<br />
x2 = randn(100, 1)<br />
x3 = randn(100, 1)<br />
x = [x1; x2; x3]<br />
y = [x1; x2; x3 + 0.5]<br />
units = ones(100, 1)<br />
grp = [units; 2 * units; 3 * units]<br />
<br />
<span style="color: gray">% null hypothesis is true:</span><br />
anova(x, grp)<br />
<br />
<span style="color: gray">% alternative hypothesis is true:</span><br />
anova(y, grp)</td><td rowspan="1" colspan="1">install.packages('reshape')<br />
library(reshape)<br />
<br />
<span style="color: gray"># null hypothesis that all means are the same<br />
# is true:</span><br />
x1 = rnorm(100)<br />
x2 = rnorm(100)<br />
x3 = rnorm(100)<br />
<br />
df = melt(data.frame(x1, x2, x3))<br />
fit = lm(df$value ~ df$variable)<br />
anova(fit)</td><td rowspan="1" colspan="1">stats.f_oneway()</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="time-series" shape="rect" id="time-series"></a><a href="numerical-analysis2#time-series-note" shape="rect">time series</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="time-series-construction" shape="rect" id="time-series-construction"></a><a href="numerical-analysis2#time-series-construction-note" shape="rect">time series</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># first observation time is 1:</span><br />
y = ts(rnorm(100))<br />
<br />
<span style="color: gray"># first observation time is 0:</span><br />
y2 = ts(rnorm(100), start=0)<br />
<br />
plot(y)</td><td rowspan="1" colspan="1"><span style="color: gray"># first observation time is 0:</span><br />
y = pd.Series(randn(100))<br />
<br />
<span style="color: gray"># first observation time is 1:</span><br />
y2 = pd.Series(randn(100), index=range(1,101))<br />
<br />
y.plot()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="monthly-time-series" shape="rect" id="monthly-time-series"></a><a href="numerical-analysis2#monthly-time-series-note" shape="rect">monthly time series</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"><span style="color: gray"># monthly observations 1993-1997:</span><br />
y = ts(rnorm(60), frequency=12, start=1993)<br />
<br />
<span style="color: gray"># monthly observations from Oct 1993:</span><br />
y2 = ts(rnorm(60), frequency=12, start=c(1993, 10))<br />
<br />
plot(y)</td><td rowspan="1" colspan="1">dt = pd.datetime(2013, 1, 1)<br />
idx = pd.date_range(dt, periods=60, freq='M')<br />
y = pd.Series(randn(60), index=idx)<br />
<br />
dt2 = pd.datetime(2013, 10, 1)<br />
idx2 = pd.date_range(dt2, periods=60, freq='M')<br />
y2 = pd.Series(randn(60), index=idx2)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="time-series-lookup-time" shape="rect" id="time-series-lookup-time"></a><a href="numerical-analysis2#time-series-lookup-time-note" shape="rect">lookup by time</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">start = tsp(y2)[1]<br />
end = tsp(y2)[2]<br />
freq = tsp(y2)[3]<br />
<br />
<span style="color: gray"># value for Jan 1994:</span><br />
y2[(1994 - start) * freq + 1]</td><td rowspan="1" colspan="1">y2[pd.datetime(2014, 1, 31)]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="time-series-lookup-position" shape="rect" id="time-series-lookup-position"></a><a href="numerical-analysis2#time-series-lookup-position-note" shape="rect">lookup by position in series</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">for (i in 1:length(y)) {<br />
<span style="white-space: pre-wrap;">  </span>print(y[i])<br />
}</td><td rowspan="1" colspan="1">for i in range(0, len(y)):<br />
<span style="white-space: pre-wrap;">  </span>y.ix[i]</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="aligned-arithmetic" shape="rect" id="aligned-arithmetic"></a><a href="numerical-analysis2#aligned-arithmetic-note" shape="rect">aligned arithmetic</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">y = ts(rnorm(10), start=0)<br />
y2 = ts(rnorm(10), start=5)<br />
<br />
<span style="color: gray"># time series with 5 data points:</span><br />
y3 = y + y2</td><td rowspan="1" colspan="1">y = pd.Series(randn(10))<br />
y2 = pd.Series(randn(10), index=range(5, 15))<br />
<br />
<span style="color: gray"># time series with 15 data points; 10 of<br />
# which are NaN:</span><br />
# y3 = y + y2</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="lag-operator" shape="rect" id="lag-operator"></a><a href="numerical-analysis2#lag-operator-note" shape="rect">lag operator</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = ts(rnorm(100))<br />
y = x + lag(x, 1)</td><td rowspan="1" colspan="1">x = pd.Series(randn(100))<br />
y = x + x.shift(-1)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="lagged-difference" shape="rect" id="lagged-difference"></a><a href="numerical-analysis2#lagged-difference-note" shape="rect">lagged difference</a><br />
<span style="white-space: pre-wrap;"> </span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">delta = diff(y, lag=1)</td><td rowspan="1" colspan="1">delta = y.diff(1)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="simple-moving-avg" shape="rect" id="simple-moving-avg"></a><a href="numerical-analysis2#simple-moving-avg-note" shape="rect">simple moving average</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('TTR')<br />
library('TTR')<br />
<br />
ma = SMA(y, n=4)<br />
<br />
plot(y)<br />
lines(ma, col='red')</td><td rowspan="1" colspan="1">y = pd.Series(randn(50))<br />
ma = pd.rolling_mean(y, 4)<br />
<br />
plot(y, 'k', ma, 'r')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="weighted-moving-avg" shape="rect" id="weighted-moving-avg"></a><a href="numerical-analysis2#weighted-moving-avg-note" shape="rect">weighted moving average</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('TTR')<br />
library('TTR')<br />
<br />
ma = WMA(y, n=4, wts=c(1, 2, 3, 4))<br />
<br />
plot(y)<br />
lines(ma, col='red')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="exponential-smoothing" shape="rect" id="exponential-smoothing"></a><a href="numerical-analysis2#exponential-smoothing-note" shape="rect">exponential smoothing</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rnorm(100)<br />
fit = HoltWinters(x, alpha=0.5, beta=F, gamma=F)<br />
<br />
values = fit$fitted<br />
plot(fit)</td><td rowspan="1" colspan="1">alpha = 0.5<br />
span = (2 / alpha) - 1<br />
fit = pd.ewma(y, span=span, adjust=False)<br />
<br />
fit.plot()</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="least-squares-exponential-smoothing" shape="rect" id="least-squares-exponential-smoothing"></a><a href="numerical-analysis2#least-squares-exponential-smoothing-note" shape="rect">exponential smoothing with best least squares fit</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rnorm(100)<br />
fit = HoltWinters(x, beta=F, gamma=F)<br />
<br />
alpha = fit$a<br />
plot(fit)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="decompose-seasonal-trend" shape="rect" id="decompose-seasonal-trend"></a><a href="numerical-analysis2#decompose-seasonal-trend-note" shape="rect">decompose into seasonal and trend</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">raw = seq(1,100) + rnorm(100) + rep(seq(1,10), 10)<br />
y = ts(raw, frequency=10)<br />
<br />
<span style="color: gray"># additive model: t + s + r:</span><br />
yd = decompose(y)<br />
yd$trend<br />
yd$seasonal<br />
yd$random<br />
<br />
plot(yd)<br />
<br />
<span style="color: gray"># multiplicative model: t * s * r:</span><br />
yd2 = decompose(y, type="multiplicative")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="correlogram" shape="rect" id="correlogram"></a><a href="numerical-analysis2#correlogram-note" shape="rect">correlogram</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rnorm(100)<br />
x2 = append(x[4:100], x[1:3])<br />
<br />
acf(x, lag.max=20)<br />
acf(x + x2, lag.max=20)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">test for stationarity</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="arma" shape="rect" id="arma"></a><a href="numerical-analysis2#arma-note" shape="rect">arma</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="arima" shape="rect" id="arima"></a><a href="numerical-analysis2#arima-note" shape="rect">arima</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="automatic-arima" shape="rect" id="automatic-arima"></a><a href="numerical-analysis2#arima-note" shape="rect">arima with automatic model selection</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="fast-fourier-transform" shape="rect" id="fast-fourier-transform"></a><a href="numerical-analysis2#fast-fourier-transform-note" shape="rect">fast fourier transform</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="fft" shape="rect" id="fft"></a><a href="numerical-analysis2#fft-note" shape="rect">fft</a></td><td rowspan="1" colspan="1">x = 3 * sin(1:100) + sin(3 * (1:100)) + randn(1, 100)<br />
<br />
dft = fft(x)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="ifft" shape="rect" id="ifft"></a><a href="numerical-analysis2#ifft-note" shape="rect">inverse fft</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="fftshift" shape="rect" id="fftshift"></a><a href="numerical-analysis2#fftshift-note" shape="rect">shift constant component to center</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="fft2" shape="rect" id="fft2"></a><a href="numerical-analysis2#fft2-note" shape="rect">two-dimensional fft</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="fftn" shape="rect" id="fftn"></a><a href="numerical-analysis2#fftn-note" shape="rect">n-dimensional fft</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="clustering" shape="rect" id="clustering"></a><a href="numerical-analysis2#clustering-note" shape="rect">clustering</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">distance matrix</td><td rowspan="1" colspan="1">pts = [1 1; 1 2; 2 1; 2 3; 3 4; 4 4]<br />
<br />
<span style="color: gray">% value at (i, j) is distance between i-th<br />
% and j-th observation</span><br />
dm = squareform(pdist(pts, 'euclidean'))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">distance options</td><td rowspan="1" colspan="1"><span style="color: gray">'euclidean'<br />
'seuclidian'<br />
'cityblock'<br />
'minkowski'<br />
'chebychev'<br />
'mahalanobis'<br />
'cosine'<br />
'correlation'<br />
'spearman'<br />
'hamming'<br />
'jaccard'</span></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">hierarchical clusters</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">dendogram</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">silhouette plot</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">k-means</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="images" shape="rect" id="images"></a><a href="numerical-analysis2#images-note" shape="rect">images</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">load from file</td><td rowspan="1" colspan="1">X = imread('cat.jpg');</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">display image</td><td rowspan="1" colspan="1">imshow(X)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">image info</td><td rowspan="1" colspan="1">whos X<br />
<br />
imfinfo('cat.jpg')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">write to file</td><td rowspan="1" colspan="1">imwrite(X, 'cat2.jpg')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="sound" shape="rect" id="sound"></a><a href="numerical-analysis2#sound-note" shape="rect">sound</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1">read from file</td><td rowspan="1" colspan="1">[y, fs] = audioread('speech.flac')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">record clip</td><td rowspan="1" colspan="1">recObj = audiorecorder<br />
<span style="color: gray">% record 5 seconds:</span><br />
recordblocking(recObj, 5)<br />
y = getaudiodata(recOjb);</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">write to file</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">clip info</td><td rowspan="1" colspan="1">info = audioinfo('speech.flac')<br />
<br />
info.NumChannels<br />
info.SampleRate<br />
info.TotalSamples<br />
info.Duration</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1">play clip</td><td rowspan="1" colspan="1">sound(y, fs)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="bar-charts" shape="rect" id="bar-charts"></a><a href="numerical-analysis2#bar-charts-note" shape="rect">bar charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="vertical-bar-chart" shape="rect" id="vertical-bar-chart"></a><img src="http://cdn.hyperpolyglot.org/images/vertical-bar-chart.jpg" alt="vertical-bar-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#vertical-bar-chart-note" shape="rect">vertical bar chart</a></td><td rowspan="1" colspan="1">bar([7 3 8 5 5])<br />
set(gca, 'XTick', 1:5, <span style="white-space: pre-wrap;">...</span><br />
<span style="white-space: pre-wrap;">  </span>'XTickLabel', {'a', 'b', 'c', 'd', 'e'})</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
barplot(cnts)<br />
<br />
<span style="color: gray"># ggplot2:</span><br />
cnts = c(7,3,8,5,5)<br />
names = c("a","b","c","d","e")<br />
df = data.frame(names, cnts)<br />
qplot(names, data=df, geom="bar", weight=cnts)</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
plt.bar(range(0,len(cnts)), cnts)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bar-chart-error-bars" shape="rect" id="bar-chart-error-bars"></a><a href="numerical-analysis2#bar-chart-error-bars-note" shape="rect">bar chart with error bars</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="horizontal-bar-chart" shape="rect" id="horizontal-bar-chart"></a><img src="http://cdn.hyperpolyglot.org/images/horizontal-bar-chart.jpg" alt="horizontal-bar-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#horizontal-bar-chart-note" shape="rect">horizontal bar chart</a></td><td rowspan="1" colspan="1">barh([7 3 8 5 5])</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
barplot(cnts, horiz=T)</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
plt.barh(range(0,len(cnts)), cnts)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="grouped-bar-chart" shape="rect" id="grouped-bar-chart"></a><img src="http://cdn.hyperpolyglot.org/images/grouped-bar-chart.jpg" alt="grouped-bar-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#grouped-bar-chart-note" shape="rect">grouped bar chart</a></td><td rowspan="1" colspan="1">d = [7 1; 3 2; 8 1; 5 3; 5 1]<br />
bar(d)</td><td rowspan="1" colspan="1">data = matrix(c(7,1,3,2,8,1,5,3,5,1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=2)<br />
labels = c("a","b","c","d","e")<br />
barplot(data, names.arg=labels, beside=TRUE)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="stacked-bar-chart" shape="rect" id="stacked-bar-chart"></a><img src="http://cdn.hyperpolyglot.org/images/stacked-bar-chart.jpg" alt="stacked-bar-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#stacked-bar-chart-note" shape="rect">stacked bar chart</a></td><td rowspan="1" colspan="1">d = [7 1; 3 2; 8 1; 5 3; 5 1]<br />
bar(d, 'stacked')</td><td rowspan="1" colspan="1">data = matrix(c(7,1,3,2,8,1,5,3,5,1),<br />
<span style="white-space: pre-wrap;">  </span>nrow=2)<br />
labels = c("a","b","c","d","e")<br />
barplot(data, names.arg=labels)</td><td rowspan="1" colspan="1">a1 = [7,3,8,5,5]<br />
a2 = [1,2,1,3,1]<br />
plt.bar(range(0,5), a1, color='r')<br />
plt.bar(range(0,5), a2, color='b')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="pie-chart" shape="rect" id="pie-chart"></a><img src="http://cdn.hyperpolyglot.org/images/pie-chart.jpg" alt="pie-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#pie-chart-note" shape="rect">pie chart</a></td><td rowspan="1" colspan="1">labels = {'a','b','c','d','e'}<br />
pie([7 3 8 5 5], labels)</td><td rowspan="1" colspan="1">cnts = c(7,3,8,5,5)<br />
names(cnts) = c("a","b","c","d","e")<br />
pie(cnts)</td><td rowspan="1" colspan="1">cnts = [7,3,8,5,5]<br />
labs = ['a','b','c','d','e']<br />
plt.pie(cnts, labels=labs)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="histogram" shape="rect" id="histogram"></a><img src="http://cdn.hyperpolyglot.org/images/histogram.jpg" alt="histogram.jpg" class="image" /><br />
<a href="numerical-analysis2#histogram-note" shape="rect">histogram</a></td><td rowspan="1" colspan="1">hist(randn(1, 100), 10)</td><td rowspan="1" colspan="1">hist(rnorm(100), breaks=10)<br />
<br />
hist(rnorm(100), breaks=seq(-3, 3, 0.5))<br />
<br />
<span style="color: gray"># ggplot2:</span><br />
x = rnorm(50)<br />
binwidth = (max(x) - min(x)) / 10<br />
qplot(x, geom="histogram", binwidth=binwidth)</td><td rowspan="1" colspan="1">plt.hist(sp.randn(100),<br />
<span style="white-space: pre-wrap;">  </span>bins=range(-5,5))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="box-plot" shape="rect" id="box-plot"></a><img src="http://cdn.hyperpolyglot.org/images/box-plot.jpg" alt="box-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#box-plot-note" shape="rect">box plot</a></td><td rowspan="1" colspan="1">boxplot(randn(1, 100))</td><td rowspan="1" colspan="1">boxplot(rnorm(100))</td><td rowspan="1" colspan="1">plt.boxplot(sp.randn(100))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="box-plots-side-by-side" shape="rect" id="box-plots-side-by-side"></a><a href="numerical-analysis2#box-plots-side-by-side-note" shape="rect">box plots side-by-side</a></td><td rowspan="1" colspan="1">boxplot([randn(1, 100)<br />
<span style="white-space: pre-wrap;">  </span>exprnd(1, 1, 100)<br />
<span style="white-space: pre-wrap;">  </span>unifrnd(0, 1, 1, 100)]')</td><td rowspan="1" colspan="1">boxplot(rnorm(100), rexp(100), runif(100))</td><td rowspan="1" colspan="1">plt.boxplot([sp.randn(100),<br />
<span style="white-space: pre-wrap;">  </span>np.random.uniform(size=100),<br />
<span style="white-space: pre-wrap;">  </span>np.random.exponential(size=100)])</td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="scatter-plots" shape="rect" id="scatter-plots"></a><a href="numerical-analysis2#scatter-plots-note" shape="rect">scatter plots</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="strip-chart" shape="rect" id="strip-chart"></a><img src="http://cdn.hyperpolyglot.org/images/strip-chart.jpg" alt="strip-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#strip-chart-note" shape="rect">strip chart</a></td><td rowspan="1" colspan="1">data = randn(1, 50)<br />
plot(data, zeros(size(data)), 'o')</td><td rowspan="1" colspan="1">stripchart(rnorm(50))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="strip-chart-jitter" shape="rect" id="strip-chart-jitter"></a><img src="http://cdn.hyperpolyglot.org/images/strip-chart-jitter.jpg" alt="strip-chart-jitter.jpg" class="image" /><br />
<a href="numerical-analysis2#strip-chart-jitter-note" shape="rect">strip chart with jitter</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">stripchart(floor(50 * runif(20)),<br />
<span style="white-space: pre-wrap;">  </span>method="jitter")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="scatter-plot" shape="rect" id="scatter-plot"></a><img src="http://cdn.hyperpolyglot.org/images/scatter-plot.jpg" alt="scatter-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#scatter-plot-note" shape="rect">scatter plot</a></td><td rowspan="1" colspan="1">plot(randn(1,50),randn(1,50),'+')</td><td rowspan="1" colspan="1">plot(rnorm(50), rnorm(50))</td><td rowspan="1" colspan="1">plt.scatter(sp.randn(50), sp.randn(50), marker='x')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="additional-point-set" shape="rect" id="additional-point-set"></a><img src="http://cdn.hyperpolyglot.org/images/additional-point-set.jpg" alt="additional-point-set.jpg" class="image" /><br />
<a href="numerical-analysis2#additional-point-set-note" shape="rect">additional point set</a></td><td rowspan="1" colspan="1">plot(randn(20), randn(20), '.k', randn(20), randn(20), '.r')</td><td rowspan="1" colspan="1">plot(rnorm(20), rnorm(20))<br />
points(rnorm(20) + 1, rnorm(20) + 1,<br />
<span style="white-space: pre-wrap;">  </span>col='red')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="point-types" shape="rect" id="point-types"></a><a href="numerical-analysis2#point-types-note" shape="rect">point types</a></td><td rowspan="1" colspan="1"><span style="color: gray">'.': point<br />
'o': circle<br />
'x': x-mark<br />
'+': plus<br />
'*': star<br />
's': square<br />
'd': diamond<br />
'v': triangle (down)<br />
'^': triangle (up)<br />
'&lt;': triangle (left)<br />
'&gt;': traingle (right)<br />
'p': pentagram<br />
'h': hexagram</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Integer values for</em> pch <em>parameter:</em><br />
<br />
0: open square<br />
1: open circle<br />
2: open triangle, points up<br />
3: cross<br />
4: x<br />
5: open diamond<br />
6: open triangle, points down<br />
15: solid square<br />
16: solid circle<br />
17: solid triangle, points up<br />
18: solid diamond</span></td><td rowspan="1" colspan="1"><span style="color: gray">marker <em>parameter takes these string values:</em></span><br />
<br />
<span style="color: gray">'.': point<br />
',': pixel<br />
'o': circle<br />
'v': triangle_down<br />
'^': triangle_up<br />
'&lt;': triangle_left<br />
'&gt;': triangle_right<br />
'1': tri_down<br />
'2': tri_up<br />
'3': tri_left<br />
'4': tri_right<br />
'8': octagon<br />
's': square<br />
'p': pentagon<br />
'*': star<br />
'h': hexagon1<br />
'H': hexagon2<br />
'+': plus<br />
'x': x<br />
'D': diamond<br />
'd': thin_diamond<br />
'|': vline<br />
'_': hline</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="point-size" shape="rect" id="point-size"></a><a href="numerical-analysis2#point-size-note" shape="rect">point size</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">plot(rnorm(50), rnorm(50), cex=2)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="scatter-plot-matrix" shape="rect" id="scatter-plot-matrix"></a><img src="http://cdn.hyperpolyglot.org/images/scatter-plot-matrix.jpg" alt="scatter-plot-matrix.jpg" class="image" /><br />
<a href="numerical-analysis2#scatter-plot-matrix-note" shape="rect">scatter plot matrix</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = rnorm(20)<br />
y = rnorm(20)<br />
z = x + 3*y<br />
w = y + 0.1*rnorm(20)<br />
df = data.frame(x, y, z, w)<br />
<br />
pairs(df)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="scatter-plot-3d" shape="rect" id="scatter-plot-3d"></a><img src="http://cdn.hyperpolyglot.org/images/scatter-plot-3d.jpg" alt="scatter-plot-3d.jpg" class="image" /><br />
<a href="numerical-analysis2#scatter-plot-3d-note" shape="rect">3d scatter plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('scatterplot3d')<br />
library('scatterplot3d')<br />
<br />
scatterplot3d(rnorm(50), rnorm(50),<br />
<span style="white-space: pre-wrap;">  </span>rnorm(50), type="h")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="bubble-chart" shape="rect" id="bubble-chart"></a><img src="http://cdn.hyperpolyglot.org/images/bubble-chart.jpg" alt="bubble-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#bubble-chart-note" shape="rect">bubble chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('ggplot2')<br />
library('ggplot2')<br />
<br />
df = data.frame(x=rnorm(20),<br />
<span style="white-space: pre-wrap;">  </span>y=rnorm(20), z=rnorm(20))<br />
<br />
p = ggplot(df, aes(x=x, y=y, size=z))<br />
p + geom_point()</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="hexagonal-bins" shape="rect" id="hexagonal-bins"></a><img src="http://cdn.hyperpolyglot.org/images/hexagonal-bins.jpg" alt="hexagonal-bins.jpg" class="image" /><br />
<a href="numerical-analysis2#hexagonal-bins-note" shape="rect">hexagonal bins</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('hexbin')<br />
library('hexbin')<br />
<br />
plot(hexbin(rnorm(1000),<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>rnorm(1000),<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>xbins=12))</td><td rowspan="1" colspan="1">hexbin(randn(1000),<br />
<span style="white-space: pre-wrap;">  </span>randn(1000),<br />
<span style="white-space: pre-wrap;">  </span>gridsize=12)</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="linear-regression-line" shape="rect" id="linear-regression-line"></a><img src="http://cdn.hyperpolyglot.org/images/linear-regression-line.jpg" alt="linear-regression-line.jpg" class="image" /><br />
<a href="numerical-analysis2#linear-regression-line-note" shape="rect">linear regression line</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = 0:20<br />
y = 2 * x + rnorm(21) * 10<br />
<br />
fit = lm(y ~ x)<br />
<br />
plot(y)<br />
lines(x, fit$fitted.values, type='l',<br />
<span style="white-space: pre-wrap;">  </span>col='red')</td><td rowspan="1" colspan="1">x = range(0,20)<br />
err = sp.randn(20)*10<br />
y = [2*i for i in x] + err<br />
<br />
A = np.vstack([x,np.ones(len(x))]).T<br />
m, c = np.linalg.lstsq(A, y)[0]<br />
<br />
plt.scatter(x, y)<br />
plt.plot(x, [m*i + c for i in x])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="q-q-plot" shape="rect" id="q-q-plot"></a><img src="http://cdn.hyperpolyglot.org/images/q-q-plot.jpg" alt="q-q-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#q-q-plot-note" shape="rect">quantile-quantile plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">qqplot(runif(50), rnorm(50))<br />
lines(c(-9,9), c(-9,9), col="red")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="line-charts" shape="rect" id="line-charts"></a><a href="numerical-analysis2#line-charts-note" shape="rect">line charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="polygonal-line-plot" shape="rect" id="polygonal-line-plot"></a><img src="http://cdn.hyperpolyglot.org/images/polygonal-line-plot.jpg" alt="polygonal-line-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#polygonal-line-plot-note" shape="rect">polygonal line plot</a></td><td rowspan="1" colspan="1">plot(1:20,randn(1,20))</td><td rowspan="1" colspan="1">plot(1:20, rnorm(20), type="l")</td><td rowspan="1" colspan="1">plt.plot(range(0,20), sp.randn(20), '-')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="additional-line" shape="rect" id="additional-line"></a><img src="http://cdn.hyperpolyglot.org/images/additional-line.jpg" alt="additional-line.jpg" class="image" /><br />
<a href="numerical-analysis2#additional-line-note" shape="rect">additional line</a></td><td rowspan="1" colspan="1">plot(1:20, randn(1, 20),<br />
<span style="white-space: pre-wrap;">  </span>1:20, randn(1, 20))<br />
<br />
<span style="color: gray"><em>optional method:</em></span><br />
plot(1:20, randn(1, 20))<br />
hold on<br />
plot(1:20, randn(1, 20))</td><td rowspan="1" colspan="1">plot(1:20, rnorm(20), type="l")<br />
lines(1:20, rnorm(20), col="red")</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="line-types" shape="rect" id="line-types"></a><a href="numerical-analysis2#line-types-note" shape="rect">line types</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Optional 3rd argument to plot:</em><br />
<br />
'-': solid<br />
':': dotted<br />
'-.': dashdot<br />
'—': dashed</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Integer or string values for</em> lty <em>parameter:</em><br />
<br />
0: 'blank'<br />
1: 'solid' (default)<br />
2: 'dashed'<br />
3: 'dotted'<br />
4: 'dotdash'<br />
5: 'longdash'<br />
6: 'twodash'</span></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Optional 3rd argument to plot:</em></span><br />
<br />
<span style="color: gray">'-': solid line<br />
<span style="white-space: pre-wrap;">'--'</span>: dashed line<br />
'-.': dash-dot line<br />
':': dotted line<br />
'.': point<br />
',': pixel<br />
'o': circle<br />
'v': triangle_down<br />
'^': triangle_up<br />
'&lt;': triangle_left<br />
'&gt;': triangle_right<br />
'1': tri_down<br />
'2': tri_up<br />
'3': tri_left<br />
'4': tri_right<br />
's': square<br />
'p': pentagon<br />
'*': star<br />
'h': hexagon1<br />
'H': hexagon2<br />
'+': plus<br />
'x': x<br />
'D': diamond<br />
'd': thin_diamond<br />
'|': vline<br />
'_': hline</span></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="line-thickness" shape="rect" id="line-thickness"></a><a href="numerical-analysis2#line-thickness-note" shape="rect">line thickness</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">plot(1:20, rnorm(20), type="l", lwd=5)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="function-plot" shape="rect" id="function-plot"></a><img src="http://cdn.hyperpolyglot.org/images/function-plot.jpg" alt="function-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#function-plot-note" shape="rect">function plot</a></td><td rowspan="1" colspan="1">fplot(@sin, [-4 4])</td><td rowspan="1" colspan="1">x = seq(-4, 4, .01)<br />
plot(sin(x), type="l")</td><td rowspan="1" colspan="1">x = [i * .01 for i in range(-400, 400)]<br />
plt.plot(x, sin(x), '-')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="area-chart" shape="rect" id="area-chart"></a><img src="http://cdn.hyperpolyglot.org/images/area-chart.jpg" width="75px" alt="area-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#area-chart-note" shape="rect">stacked area chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('ggplot2')<br />
library('ggplot2')<br />
<br />
x = rep(0:4, each=3)<br />
y = round(5 * runif(15))<br />
letter = rep(LETTERS[1:3], 5)<br />
df = data.frame(x, y, letter)<br />
<br />
p = ggplot(df, aes(x=x, y=y,<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>group=letter,<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>fill=letter))<br />
p + geom_area(position='stack')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="overlapping-area-chart" shape="rect" id="overlapping-area-chart"></a><img src="http://cdn.hyperpolyglot.org/images/overlapping-area-chart.jpg" alt="overlapping-area-chart.jpg" class="image" /><br />
<a href="numerical-analysis2#overlapping-area-chart-note" shape="rect">overlapping area chart</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">install.packages('ggplot2')<br />
library('ggplot2')<br />
<br />
x = rep(0:4, each=3)<br />
y = round(5 * runif(15))<br />
letter = rep(LETTERS[1:3], 5)<br />
df = data.frame(x, y, letter)<br />
alpha = rep(I(2/10), each=15)<br />
<br />
p = ggplot(df, aes(x=x, ymin=0, ymax=y,<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>group=letter, fill=letter,<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>alpha=alpha))<br />
p + geom_ribbon()</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="surface-charts" shape="rect" id="surface-charts"></a><a href="numerical-analysis2#surface-charts-note" shape="rect">surface charts</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="contour-plot" shape="rect" id="contour-plot"></a><img src="http://cdn.hyperpolyglot.org/images/contour-plot.jpg" alt="contour-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#contour-plot-note" shape="rect">contour plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="heat-map" shape="rect" id="heat-map"></a><img src="http://cdn.hyperpolyglot.org/images/heat-map.jpg" alt="heat-map.jpg" class="image" /><br />
<a href="numerical-analysis2#heat-map-note" shape="rect">heat map</a></td><td rowspan="1" colspan="1">i = ones(100, 1) * (1:100)<br />
j = (1:100)' * ones(1, 100)<br />
data = sin(.2 * i) .* sin(.2 * j)<br />
colormap(gray)<br />
imagesc(data)</td><td rowspan="1" colspan="1">m = matrix(0, 100, 100)<br />
for (i in 2:100) {<br />
<span style="white-space: pre-wrap;">  </span>for (j in 2:100) {<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>m[i,j] = (m[i-1,j] + m[i,j-1])/2 +<br />
<span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span><span style="white-space: pre-wrap;">  </span>runif(1) - 0.5<br />
<span style="white-space: pre-wrap;">  </span>}<br />
}<br />
<br />
filled.contour(1:100, 1:100, m)</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="shaded-surface-plot" shape="rect" id="shaded-surface-plot"></a><img src="http://cdn.hyperpolyglot.org/images/shaded-surface-plot.jpg" alt="shaded-surface-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#shaded-surface-plot-note" shape="rect">shaded surface plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="light-source" shape="rect" id="light-source"></a><a href="numerical-analysis2#light-source-note" shape="rect">light source</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="mesh-surface-plot" shape="rect" id="mesh-surface-plot"></a><img src="http://cdn.hyperpolyglot.org/images/mesh-surface-plot.jpg" alt="mesh-surface-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#mesh-surface-plot-note" shape="rect">mesh surface plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="view-point" shape="rect" id="view-point"></a><a href="numerical-analysis2#view-point-note" shape="rect">view point</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="vector-field-plot" shape="rect" id="vector-field-plot"></a><img src="http://cdn.hyperpolyglot.org/images/vector-field-plot.jpg" alt="vector-field-plot.jpg" class="image" /><br />
<a href="numerical-analysis2#vector-field-plot-note" shape="rect">vector field plot</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th colspan="5" rowspan="1"><a name="chart-options" shape="rect" id="chart-options"></a><a href="numerical-analysis2#chart-options-note" shape="rect">chart options</a></th></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#matlab" shape="rect">matlab</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#r" shape="rect">r</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#numpy" shape="rect">numpy</a></th><th rowspan="1" colspan="1"><a href="numerical-analysis2#julia" shape="rect">julia</a></th></tr><tr><td rowspan="1" colspan="1"><a name="chart-title" shape="rect" id="chart-title"></a><a href="numerical-analysis2#chart-title-note" shape="rect">chart title</a></td><td rowspan="1" colspan="1">bar([7 3 8 5 5])<br />
title('bar chart example')</td><td rowspan="1" colspan="1"><span style="color: gray"><em>all chart functions except for</em> stem <em>accept a</em> main <em>parameter:</em></span><br />
boxplot(rnorm(100),<br />
<span style="white-space: pre-wrap;">  </span>main="boxplot example",<br />
<span style="white-space: pre-wrap;">  </span>sub="to illustrate options")</td><td rowspan="1" colspan="1">plt.boxplot(sp.randn(100))<br />
plt.title('boxplot example')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="axis-labels" shape="rect" id="axis-labels"></a><a href="numerical-analysis2#axis-labels-note" shape="rect">axis labels</a></td><td rowspan="1" colspan="1">plot( 1:20, (1:20) .** 2)<br />
xlabel('x')<br />
ylabel('x squared')</td><td rowspan="1" colspan="1">plot(1:20, (1:20)^2,<br />
<span style="white-space: pre-wrap;">  </span>xlab="x", ylab="x squared")</td><td rowspan="1" colspan="1">x = range(0, 20)<br />
plt.plot(x, [i * i for i in x], '-')<br />
plt.xlabel('x')<br />
plt.ylabel('x squared')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="legend" shape="rect" id="legend"></a><img src="http://cdn.hyperpolyglot.org/images/legend.jpg" alt="legend.jpg" class="image" /><br />
<a href="numerical-analysis2#legend-note" shape="rect">legend</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x = (1:20)<br />
y = x + rnorm(20)<br />
y2 = x - 2 + rnorm(20)<br />
<br />
plot(x, y, type="l", col="black")<br />
lines(x, y2, type="l", col="red")<br />
legend('topleft', c('first', 'second'),<br />
<span style="white-space: pre-wrap;">  </span>lty=c(1,1), lwd=c(2.5, 2.5),<br />
<span style="white-space: pre-wrap;">  </span>col=c('black', 'red'))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="colors" shape="rect" id="colors"></a><a href="numerical-analysis2#colors-note" shape="rect">colors</a></td><td rowspan="1" colspan="1"><span style="color: gray"><em>Use color letters by themselves for colored lines. Use '.r' for red dots.</em><br />
<br />
'b': blue<br />
'g': green<br />
'r': red<br />
'c': cyan<br />
'm': magenta<br />
'y': yellow<br />
'k': black<br />
'w': white</span></td><td rowspan="1" colspan="1"><span style="color: gray"># Use the col parameter to specify the color of<br />
# points and lines.<br />
#<br />
# The colors() function returns a list of<br />
# recognized names for colors.</span><br />
<br />
plot(rnorm(10), col='red')<br />
plot(rnorm(10), col='#FF0000')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="axis-limits" shape="rect" id="axis-limits"></a><a href="numerical-analysis2#axis-limits-note" shape="rect">axis limits</a></td><td rowspan="1" colspan="1">plot( 1:20, (1:20) .** 2)<br />
<span style="color: gray">% [xmin, xmax, ymin, ymax]:</span><br />
axis([1 20 -200 500])</td><td rowspan="1" colspan="1">plot(1:20, (1:20)^2,<br />
<span style="white-space: pre-wrap;">  </span>xlim=c(0, 20), ylim=c(-200,500))</td><td rowspan="1" colspan="1">x = range(0, 20)<br />
plt.plot(x, [i * i for i in x], '-')<br />
plt.xlim([0, 20])<br />
plt.ylim([-200, 500])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="logarithmic-y-axis" shape="rect" id="logarithmic-y-axis"></a><a href="numerical-analysis2#logarithmic-y-axis-note" shape="rect">logarithmic y-axis</a></td><td rowspan="1" colspan="1">semilogy(x, x .** 2,<br />
<span style="white-space: pre-wrap;">  </span>x, x .** 3,<br />
<span style="white-space: pre-wrap;">  </span>x, x .** 4,<br />
<span style="white-space: pre-wrap;">  </span>x, x .** 5)</td><td rowspan="1" colspan="1">x = 0:20<br />
plot(x, x^2, log="y",type="l")<br />
lines(x, x^3, col="blue")<br />
lines(x, x^4, col="green")<br />
lines(x, x^5, col="red")</td><td rowspan="1" colspan="1">x = range(0, 20)<br />
<br />
for i in [2,3,4,5]:<br />
<span style="white-space: pre-wrap;">  </span>y.append([j**i for j in x])<br />
<br />
for i in [0,1,2,3]:<br />
<span style="white-space: pre-wrap;">  </span>semilogy(x, y[i])</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="superimposed-plots" shape="rect" id="superimposed-plots"></a><a href="numerical-analysis2#superimposed-plots-note" shape="rect">superimposed plots with different y-axis scales</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">x &lt;- 1:10<br />
y &lt;- rnorm(10)<br />
z &lt;- rnorm(10) * 1000<br />
par(mar = c(5, 4, 4, 4) + 0.3)<br />
plot(x, y, type='l')<br />
par(new=T)<br />
plot(x, z, col='red', type='l', axes=F,<br />
<span style="white-space: pre-wrap;">  </span>xlab='', ylab='')<br />
axis(side=4, col='red', col.axis='red',<br />
<span style="white-space: pre-wrap;">  </span>at=pretty(range(z)))<br />
mtext('z', side=4, line=3, col='red')</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="aspect-ratio" shape="rect" id="aspect-ratio"></a><a href="numerical-analysis2#aspect-ratio-note" shape="rect">aspect ratio</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="ticks" shape="rect" id="ticks"></a><a href="numerical-analysis2#ticks-note" shape="rect">ticks</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="grid-lines" shape="rect" id="grid-lines"></a><a href="numerical-analysis2#grid-lines-note" shape="rect">grid lines</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="subplot-grid" shape="rect" id="subplot-grid"></a><img src="http://cdn.hyperpolyglot.org/images/subplot-grid.jpg" alt="subplot-grid.jpg" class="image" /><br />
<a href="numerical-analysis2#subplot-grid-note" shape="rect">grid of subplots</a></td><td rowspan="1" colspan="1"><span style="color: gray">% 3rd arg refers to the subplot;<br />
% subplots are numbered in row-major order.</span><br />
for i = 1:4<br />
<span style="white-space: pre-wrap;">  </span>subplot(2, 2, i), hist(randn(50))<br />
end</td><td rowspan="1" colspan="1">for (i in split.screen(c(2, 2))) {<br />
<span style="white-space: pre-wrap;">  </span>screen(n=i)<br />
<span style="white-space: pre-wrap;">  </span>hist(rnorm(100))<br />
}</td><td rowspan="1" colspan="1">for i in [1, 2, 3, 4]:<br />
<span style="white-space: pre-wrap;">  </span>plt.subplot(2, 2, i)<br />
<span style="white-space: pre-wrap;">  </span>plt.hist(sp.randn(100), bins=range(-5,5))</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="new-plot-window" shape="rect" id="new-plot-window"></a><a href="numerical-analysis2#new-plot-window-note" shape="rect">open new plot window</a></td><td rowspan="1" colspan="1">open new plot<br />
figure<br />
open new plot</td><td rowspan="1" colspan="1">hist(rnorm(100))<br />
dev.new()<br />
hist(rnorm(100))</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="close-plot-windows" shape="rect" id="close-plot-windows"></a><a href="numerical-analysis2#close-plot-windows-note" shape="rect">close all plot windows</a></td><td rowspan="1" colspan="1">close all</td><td rowspan="1" colspan="1">graphics.off()</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="save-plot-as-png" shape="rect" id="save-plot-as-png"></a><a href="numerical-analysis2#save-plot-as-png-note" shape="rect">save plot as png</a></td><td rowspan="1" colspan="1">f = figure<br />
hist(randn(100))<br />
print(f, '-dpng', 'histogram.png')</td><td rowspan="1" colspan="1">png('hist.png')<br />
hist(rnorm(100))<br />
dev.off()</td><td rowspan="1" colspan="1">y = randn(50)<br />
plot(y)<br />
savefig('line-plot.png')</td><td rowspan="1" colspan="1"></td></tr><tr><td rowspan="1" colspan="1"><a name="save-plot-as-svg" shape="rect" id="save-plot-as-svg"></a><a href="numerical-analysis2#save-plot-as-svg-note" shape="rect">save plot as svg</a></td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1">svg('hist.svg')<br />
hist(rnorm(100))<br />
dev.off()</td><td rowspan="1" colspan="1"></td><td rowspan="1" colspan="1"></td></tr><tr><th rowspan="1" colspan="1"></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">__________________________________________________</span></span></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">__________________________________________________</span></span></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">__________________________________________________</span></span></th><th rowspan="1" colspan="1"><span style="color: #efefef"><span style="white-space: pre-wrap;">__________________________________________________</span></span></th></tr></table>
<p><a name="tables-note" shape="rect" id="tables-note"></a></p>
<h1 id="toc0"><span><a href="numerical-analysis2#tables" shape="rect">Tables</a></span></h1>
<p>Tables are a data type which correspond to the tables of relational databases. In R this data type is called a <em>data frame</em>. The Python library Pandas provides a table data type called <em>DataFrame</em>.</p>
<p>A table is an array of tuples, each of the same length and type. If the type of the first element of the first type is integer, then all the tuples in the table must have first elements which are integers. The type of the tuples corresponds to the schema of a relational database table.</p>
<p>A table can also be</p>
<p>Pandas types: Series(), DataFrame(), Index()</p>
<p><a name="construct-from-column-arrays-note" shape="rect" id="construct-from-column-arrays-note"></a></p>
<h2 id="toc1"><span><a href="numerical-analysis2#construct-from-column-arrays" shape="rect">construct from column arrays</a></span></h2>
<p>How to construct a data frame from a set of arrays representing the columns.</p>
<p><strong>octave:</strong></p>
<p>Octave does not have the <tt>table</tt> data type.</p>
<p><a name="table-size-note" shape="rect" id="table-size-note"></a></p>
<h2 id="toc2"><span><a href="numerical-analysis2#table-size" shape="rect">size</a></span></h2>
<p>How to get the number of columns and number of rows in a table.</p>
<p><a name="construct-from-row-tuples-note" shape="rect" id="construct-from-row-tuples-note"></a></p>
<h2 id="toc3"><span><a href="numerical-analysis2#construct-from-row-tuples" shape="rect">construct from row tuples</a></span></h2>
<p><a name="column-names-as-array-note" shape="rect" id="column-names-as-array-note"></a></p>
<h2 id="toc4"><span><a href="numerical-analysis2#column-names-as-array" shape="rect">column names as array</a></span></h2>
<p>How to show the names of the columns.</p>
<p><a name="access-column-as-array-note" shape="rect" id="access-column-as-array-note"></a></p>
<h2 id="toc5"><span><a href="numerical-analysis2#access-column-as-array" shape="rect">access column as array</a></span></h2>
<p>How to access a column in a data frame.</p>
<p><a name="access-row-as-tuple-note" shape="rect" id="access-row-as-tuple-note"></a></p>
<h2 id="toc6"><span><a href="numerical-analysis2#access-row-as-tuple" shape="rect">access row as tuple</a></span></h2>
<p>How to access a row in a data frame.</p>
<p><strong>r:</strong></p>
<p><em>people[1, ]</em> returns the 1st row from the data frame <em>people</em> as a new data frame with one row. This can be converted to a list using the function <em>as.list</em>. There is often no need because lists and one row data frames have nearly the same behavior.</p>
<p><a name="access-datum-note" shape="rect" id="access-datum-note"></a></p>
<h2 id="toc7"><span><a href="numerical-analysis2#access-datum" shape="rect">access datum</a></span></h2>
<p>How to access a single datum in a data frame; i.e. the value in a column of a single row.</p>
<p><a name="order-rows-by-column-note" shape="rect" id="order-rows-by-column-note"></a></p>
<h2 id="toc8"><span><a href="numerical-analysis2#order-rows-by-column" shape="rect">order rows by column</a></span></h2>
<p>How to sort the rows in a data frame according to the values in a specified column.</p>
<p><a name="order-rows-by-multiple-columns-note" shape="rect" id="order-rows-by-multiple-columns-note"></a></p>
<h2 id="toc9"><span><a href="numerical-analysis2#order-rows-by-multiple-columns" shape="rect">order rows by multiple columns</a></span></h2>
<p><a name="order-rows-descending-order-note" shape="rect" id="order-rows-descending-order-note"></a></p>
<h2 id="toc10"><span><a href="numerical-analysis2#order-rows-descending-order" shape="rect">order rows in descending order</a></span></h2>
<p>How to sort the rows in descending order according to the values in a specified column.</p>
<p><a name="limit-rows-note" shape="rect" id="limit-rows-note"></a></p>
<h2 id="toc11"><span><a href="numerical-analysis2#limit-rows" shape="rect">limit rows</a></span></h2>
<p>How to select the first <em>n</em> rows according to some ordering.</p>
<p><a name="offset-rows-note" shape="rect" id="offset-rows-note"></a></p>
<h2 id="toc12"><span><a href="numerical-analysis2#offset-rows" shape="rect">offset rows</a></span></h2>
<p>How to select rows starting at offset <em>n</em> according to some ordering.</p>
<p><a name="attach-columns-note" shape="rect" id="attach-columns-note"></a></p>
<h2 id="toc13"><span><a href="numerical-analysis2#attach-columns" shape="rect">attach columns</a></span></h2>
<p>How to make column name a variable in the current scope which refers to the column as an array.</p>
<p><strong>r:</strong></p>
<p>Each column of the data frame is copies into a variable named after the column containing the column as a vector. Modifying the data in the variable does not alter the original data frame.</p>
<p><a name="detach-columns-note" shape="rect" id="detach-columns-note"></a></p>
<h2 id="toc14"><span><a href="numerical-analysis2#detach-columns" shape="rect">detach columns</a></span></h2>
<p>How to remove attached column names from the current scope.</p>
<p><a name="spreadsheet-editor-note" shape="rect" id="spreadsheet-editor-note"></a></p>
<h2 id="toc15"><span><a href="numerical-analysis2#spreadsheet-editor" shape="rect">spreadsheet editor</a></span></h2>
<p>How to view and edit the data frame in a spreadsheet.</p>
<p><a name="import-export-note" shape="rect" id="import-export-note"></a></p>
<h1 id="toc16"><span><a href="numerical-analysis2#import-export" shape="rect">Import and Export</a></span></h1>
<p><a name="import-tab-delimited-note" shape="rect" id="import-tab-delimited-note"></a></p>
<h2 id="toc17"><span><a href="numerical-analysis2#import-tab-delimited" shape="rect">import tab delimited file</a></span></h2>
<p>Load a data frame from a tab delimited file.</p>
<p><strong>r:</strong></p>
<p>By default strings are converted to factors. In older versions of R, this could reduce the amount of memory required to load the data frame; this is no longer true in newer versions.</p>
<p><a name="import-csv-note" shape="rect" id="import-csv-note"></a></p>
<h2 id="toc18"><span><a href="numerical-analysis2#import-csv" shape="rect">import comma-separated values file</a></span></h2>
<p>Load a data frame from a CSV file.</p>
<p><a name="column-separator-note" shape="rect" id="column-separator-note"></a></p>
<h2 id="toc19"><span><a href="numerical-analysis2#column-separator" shape="rect">set column separator</a></span></h2>
<p>How to set the column separator when importing a delimited file.</p>
<p><a name="quote-char-note" shape="rect" id="quote-char-note"></a></p>
<h2 id="toc20"><span><a href="numerical-analysis2#quote-char" shape="rect">set quote character</a></span></h2>
<p>How to change the quote character. Quoting is used when strings contain the column separator or the line terminator.</p>
<p><a name="no-header-note" shape="rect" id="no-header-note"></a></p>
<h2 id="toc21"><span><a href="numerical-analysis2#no-header" shape="rect">import file w/o header</a></span></h2>
<p>How to import a file that lacks a header.</p>
<p><a name="set-column-names-note" shape="rect" id="set-column-names-note"></a></p>
<h2 id="toc22"><span><a href="numerical-analysis2#set-column-names" shape="rect">set column names</a></span></h2>
<p>How to set the column names.</p>
<p><a name="set-column-types-note" shape="rect" id="set-column-types-note"></a></p>
<h2 id="toc23"><span><a href="numerical-analysis2#set-column-types" shape="rect">set column types</a></span></h2>
<p>How to indicate the type of the columns.</p>
<p><strong>r:</strong></p>
<p>If the column types are not set or if the type is set to NA or NULL, then the type will be set to logical, integer, numeric, complex, or factor.</p>
<p><a name="recognize-null-values-note" shape="rect" id="recognize-null-values-note"></a></p>
<h2 id="toc24"><span><a href="numerical-analysis2#recognize-null-values" shape="rect">recognize null values</a></span></h2>
<p>Specify the input values which should be converted to null values.</p>
<p><a name="unequal-row-length-note" shape="rect" id="unequal-row-length-note"></a></p>
<h2 id="toc25"><span><a href="numerical-analysis2#unequal-row-length" shape="rect">unequal row length behavior</a></span></h2>
<p>What happen when a row of input has less than or more than the expected number of columns.</p>
<p><a name="skip-comment-lines-note" shape="rect" id="skip-comment-lines-note"></a></p>
<h2 id="toc26"><span><a href="numerical-analysis2#skip-comment-lines" shape="rect">skip comment lines</a></span></h2>
<p>How to skip comment lines.</p>
<p><a name="skip-rows-note" shape="rect" id="skip-rows-note"></a></p>
<h2 id="toc27"><span><a href="numerical-analysis2#skip-rows" shape="rect">skip rows</a></span></h2>
<p><a name="max-rows-to-read-note" shape="rect" id="max-rows-to-read-note"></a></p>
<h2 id="toc28"><span><a href="numerical-analysis2#max-rows-to-read" shape="rect">maximum rows to read</a></span></h2>
<p><a name="index-column-note" shape="rect" id="index-column-note"></a></p>
<h2 id="toc29"><span><a href="numerical-analysis2#index-column" shape="rect">index column</a></span></h2>
<p><a name="export-tab-delimited-note" shape="rect" id="export-tab-delimited-note"></a></p>
<h2 id="toc30"><span><a href="numerical-analysis2#export-tab-delimited" shape="rect">export tab delimited file</a></span></h2>
<p><a name="export-csv-note" shape="rect" id="export-csv-note"></a></p>
<h2 id="toc31"><span><a href="numerical-analysis2#export-csv" shape="rect">export comma-separated values file</a></span></h2>
<p>Save a data frame to a CSV file.</p>
<p><strong>r:</strong></p>
<p>If row.names is not set to F, the initial column will be the row number as a string starting from "1".</p>
<p><a name="relational-algebra-note" shape="rect" id="relational-algebra-note"></a></p>
<h1 id="toc32"><span><a href="numerical-analysis2#relational-algebra" shape="rect">Relational Algebra</a></span></h1>
<p><a name="data-frame-map-note" shape="rect" id="data-frame-map-note"></a></p>
<h2 id="toc33"><span><a href="numerical-analysis2#data-frame-map" shape="rect">map data frame</a></span></h2>
<p>How to apply a mapping transformation to the rows of a data set.</p>
<p><a name="data-set-filter-note" shape="rect" id="data-set-filter-note"></a></p>
<h2 id="toc34"><span><a href="numerical-analysis2#data-set-filter" shape="rect">filter data set</a></span></h2>
<p>How to select the rows of a data set that satisfy a predicate.</p>
<p><a name="aggregation-note" shape="rect" id="aggregation-note"></a></p>
<h1 id="toc35"><span><a href="numerical-analysis2#aggregation" shape="rect">Aggregation</a></span></h1>
<p><a name="vectors-note" shape="rect" id="vectors-note"></a></p>
<h1 id="toc36"><span><a href="numerical-analysis2#vectors" shape="rect">Vectors</a></span></h1>
<p>A vector is a one dimensional array which supports these operations:</p>
<ul><li>addition on vectors of the same length</li><li>scalar multiplication</li><li>a dot product</li><li>a norm</li></ul>
<p>The languages in this reference sheet provide the above operations for all one dimensional arrays which contain numeric values.</p>
<p><a name="vector-literal" shape="rect" id="vector-literal"></a></p>
<h2 id="toc37"><span>vector literal</span></h2>
<p><a name="vector-element-wise" shape="rect" id="vector-element-wise"></a></p>
<h2 id="toc38"><span>element-wise arithmetic operators</span></h2>
<p><a name="vector-scalar" shape="rect" id="vector-scalar"></a></p>
<h2 id="toc39"><span>scalar multiplication</span></h2>
<p><a name="vector-dot" shape="rect" id="vector-dot"></a></p>
<h2 id="toc40"><span>dot product</span></h2>
<p><a name="vector-cross" shape="rect" id="vector-cross"></a></p>
<h2 id="toc41"><span>cross product</span></h2>
<p><a name="vector-norms" shape="rect" id="vector-norms"></a></p>
<h2 id="toc42"><span>norms</span></h2>
<p><strong>matlab:</strong></p>
<p>The <em>norm</em> function returns the p-norm, where the second argument is <em>p</em>. If no second argument is provided, the 2-norm is returned.</p>
<p><a name="matrices-note" shape="rect" id="matrices-note"></a></p>
<h1 id="toc43"><span><a href="numerical-analysis2#matrices" shape="rect">Matrices</a></span></h1>
<p><a name="matrix-literal-constructor-note" shape="rect" id="matrix-literal-constructor-note"></a></p>
<h2 id="toc44"><span><a href="numerical-analysis2#matrix-literal-constructor" shape="rect">literal or constructor</a></span></h2>
<p>Literal syntax or constructor for creating a matrix.</p>
<p>The elements of a matrix must be specified in a linear order. If the elements of each row of the matrix are adjacent to other elements of the same row in the linear order we say the order is <em>row-major</em>. If the elements of each column are adjacent to other elements of the same column we say the order is <em>column-major</em>.</p>
<p><strong>matlab:</strong></p>
<p>Square brackets are used for matrix literals. Semicolons are used to separate rows, and commas separate row elements. Optionally, newlines can be used to separate rows and whitespace to separate row elements.</p>
<p><strong>r:</strong></p>
<p>Matrices are created by passing a vector containing all of the elements, as well as the number of rows and columns, to the <em>matrix</em> constructor.</p>
<p>If there are not enough elements in the data vector, the values will be recycled. If there are too many extra values will be ignored. However, the number of elements in the data vector must be a factor or a multiple of the number of elements in the final matrix or an error results.</p>
<p>When consuming the elements in the data vector, R will normally fill by column. To change this behavior pass a <em>byrow=T</em> argument to the <em>matrix</em> constructor:</p>
<div class="code">
<pre xml:space="preserve">
<code>A = matrix(c(1,2,3,4),nrow=2,byrow=T)</code>
</pre></div>
<p><a name="constant-matrices-note" shape="rect" id="constant-matrices-note"></a></p>
<h2 id="toc45"><span><a href="numerical-analysis2#constant-matrices" shape="rect">constant matrices</a></span></h2>
<p>How to create a matrices with zeros for entries or with ones for entries.</p>
<p><a name="diagonal-matrices-note" shape="rect" id="diagonal-matrices-note"></a></p>
<h2 id="toc46"><span><a href="numerical-analysis2#diagonal-matrices" shape="rect">diagonal matrices</a></span></h2>
<p>How to create diagonal matrices including the identity matrix.</p>
<p>A matrix is diagonal if and only if <tt>a<sub>ij</sub> = 0</tt> for all <tt>i ≠ j</tt>.</p>
<p><a name="matrix-dim-note" shape="rect" id="matrix-dim-note"></a></p>
<h2 id="toc47"><span><a href="numerical-analysis2#matrix-dim" shape="rect">dimensions</a></span></h2>
<p>How to get the dimensions of a matrix.</p>
<p><a name="matrix-access" shape="rect" id="matrix-access"></a></p>
<h2 id="toc48"><span>element access</span></h2>
<p>How to access an element of a matrix. All languages described here follow the convention from mathematics of specifying the row index before the column index.</p>
<p><strong>matlab:</strong></p>
<p>Rows and columns are indexed from one.</p>
<p><strong>r:</strong></p>
<p>Rows and columns are indexed from one.</p>
<p><a name="matrix-row-access" shape="rect" id="matrix-row-access"></a></p>
<h2 id="toc49"><span>row access</span></h2>
<p>How to access a row.</p>
<p><a name="matrix-column-access" shape="rect" id="matrix-column-access"></a></p>
<h2 id="toc50"><span>column access</span></h2>
<p>How to access a column.</p>
<p><a name="submatrix-access" shape="rect" id="submatrix-access"></a></p>
<h2 id="toc51"><span>submatrix access</span></h2>
<p>How to access a submatrix.</p>
<p><a name="matrix-scalar-multiplication" shape="rect" id="matrix-scalar-multiplication"></a></p>
<h2 id="toc52"><span>scalar multiplication</span></h2>
<p>How to multiply a matrix by a scalar.</p>
<p><a name="matrix-element-wise-operators" shape="rect" id="matrix-element-wise-operators"></a></p>
<h2 id="toc53"><span>element-wise operators</span></h2>
<p>Operators which act on two identically sized matrices element by element. Note that element-wise multiplication of two matrices is used less frequently in mathematics than matrix multiplication.</p>
<div class="code">
<pre xml:space="preserve">
<code>from numpy import array
matrix(array(A) * array(B))
matrix(array(A) / array(B))</code>
</pre></div>
<p><a name="matrix-multiplication" shape="rect" id="matrix-multiplication"></a></p>
<h2 id="toc54"><span>multiplication</span></h2>
<p>How to multiply matrices. Matrix multiplication should not be confused with element-wise multiplication of matrices. Matrix multiplication in non-commutative and only requires that the number of columns of the matrix on the left match the number of rows of the matrix. Element-wise multiplication, by contrast, is commutative and requires that the dimensions of the two matrices be equal.</p>
<p><a name="kronecker-product" shape="rect" id="kronecker-product"></a></p>
<h2 id="toc55"><span>kronecker product</span></h2>
<p>The <a href="http://en.wikipedia.org/wiki/Kronecker_product" shape="rect">Kronecker product</a> is a non-commutative operation defined on any two matrices. If A is m x n and B is p x q, then the Kronecker product is a matrix with dimensions mp x nq.</p>
<p><a name="matrix-comparison" shape="rect" id="matrix-comparison"></a></p>
<h2 id="toc56"><span>comparison</span></h2>
<p>How to test two matrices for equality.</p>
<p><strong>matlab:</strong></p>
<p>== and != perform entry-wise comparison. The result of using either operator on two matrices is a matrix of boolean values.</p>
<p>~= is a synonym for !=.</p>
<p><strong>r:</strong></p>
<p>== and != perform entry-wise comparison. The result of using either operator on two matrices is a matrix of boolean values.</p>
<p><a name="matrix-norms" shape="rect" id="matrix-norms"></a></p>
<h2 id="toc57"><span>norms</span></h2>
<p>How to compute the 1-norm, the 2-norm, the infinity norm, and the frobenius norm.</p>
<p><strong>matlab:</strong></p>
<p><em>norm(A)</em> is the same as <em>norm(A,2)</em>.</p>
<p><a name="sparse-matrices-note" shape="rect" id="sparse-matrices-note"></a></p>
<h1 id="toc58"><span><a href="numerical-analysis2#sparse-matrices" shape="rect">Sparse Matrices</a></span></h1>
<p><a name="sparse-matrix-construction-note" shape="rect" id="sparse-matrix-construction-note"></a></p>
<h2 id="toc59"><span><a href="numerical-analysis2#sparse-matrix-construction" shape="rect">sparse matrix construction</a></span></h2>
<p>How to construct a sparse matrix using coordinate format.</p>
<p>Coordinate format specifies a matrix with three arrays: the row indices, the the column indices, and the values.</p>
<p><a name="sparse-matrix-decomposition-note" shape="rect" id="sparse-matrix-decomposition-note"></a></p>
<h2 id="toc60"><span><a href="numerical-analysis2#sparse-matrix-decomposition" shape="rect">sparse matrix decomposition</a></span></h2>
<p><a name="sparse-identity-matrix-note" shape="rect" id="sparse-identity-matrix-note"></a></p>
<h2 id="toc61"><span><a href="numerical-analysis2#sparse-identity-matrix" shape="rect">sparse identity matrix</a></span></h2>
<p><a name="dense-matrix-to-sparse-matrix-note" shape="rect" id="dense-matrix-to-sparse-matrix-note"></a></p>
<h2 id="toc62"><span><a href="numerical-analysis2#dense-matrix-to-sparse-matrix" shape="rect">dense matrix to sparse matrix</a></span></h2>
<p><a name="sparse-matrix-storage-note" shape="rect" id="sparse-matrix-storage-note"></a></p>
<h2 id="toc63"><span><a href="numerical-analysis2#sparse-matrix-storage" shape="rect">sparse matrix storage</a></span></h2>
<p><a name="optimization-note" shape="rect" id="optimization-note"></a></p>
<h1 id="toc64"><span><a href="numerical-analysis2#optimization" shape="rect">Optimization</a></span></h1>
<p>In an optimization problem one seeks the smallest or largest value assumed by an <em>objective function</em>. The inputs to the objective function are the <em>decision variables</em>. A set of equations or inequalities, the <em>constraints</em>, can be used to restrict the decision variables to a <em>feasible region</em>.</p>
<p>If the feasible region is empty, the problem is said to be <em>infeasible</em>. If a minimization problem does not have a lower bound on the feasible region, or if a maximization problem does not have an upper bound on the feasible region, the problem is said to be <em>unbounded</em>.</p>
<p>An optimization problem is <em>linear</em> if both its objective function and its constraints are linear. A constraint is linear if it can be written in the form <em>∑ aᵢ xᵢ ≤ b</em>, <em>∑ aᵢ xᵢ ≥ b</em>, or <em>∑ aᵢ xᵢ = b</em>, where <em>xᵢ</em> are the decision variables.</p>
<p>An <em>integer linear program</em> is a linear optimization problem where the decision variables are constrained to assume integer values. Polynomial time algorithms exist for solving linear programs when the decision variables are real-valued, but solving integer linear programs is NP-hard. A <em>mixed integer linear program</em> has a mix of integer and real-valued decision variables. A special case of an integer linear program is a <em>binary linear program</em> where the decision variables assume the values 0 or 1.</p>
<p><a name="linear-min-note" shape="rect" id="linear-min-note"></a></p>
<h2 id="toc65"><span><a href="numerical-analysis2#linear-min" shape="rect">linear minimization</a></span></h2>
<p>An example of a linear minimization problem.</p>
<p><a name="decision-var-vec-note" shape="rect" id="decision-var-vec-note"></a></p>
<h2 id="toc66"><span><a href="numerical-analysis2#decision-var-vec" shape="rect">decision variable vector</a></span></h2>
<p>How to declare a vector of decision variables.</p>
<p><a name="linear-max-note" shape="rect" id="linear-max-note"></a></p>
<h2 id="toc67"><span><a href="numerical-analysis2#linear-max" shape="rect">linear maximization</a></span></h2>
<p>An example of a linear maximization problem.</p>
<p><a name="var-declaration-constraint-note" shape="rect" id="var-declaration-constraint-note"></a></p>
<h2 id="toc68"><span><a href="numerical-analysis2#var-declaration-constraint" shape="rect">constraint in variable declaration</a></span></h2>
<p>How to include a constraint on a decision variable in its declaration.</p>
<p><a name="unbounded-behavior-note" shape="rect" id="unbounded-behavior-note"></a></p>
<h2 id="toc69"><span><a href="numerical-analysis2#unbounded-behavior" shape="rect">unbounded behavior</a></span></h2>
<p>What happens when attempting to solve an unbounded optimization problem.</p>
<p><a name="infeasible-behavior-note" shape="rect" id="infeasible-behavior-note"></a></p>
<h2 id="toc70"><span><a href="numerical-analysis2#infeasible-behavior" shape="rect">infeasible behavior</a></span></h2>
<p>What happens when attempting to solve an infeasible optimization problem.</p>
<p><a name="int-decision-var-note" shape="rect" id="int-decision-var-note"></a></p>
<h2 id="toc71"><span><a href="numerical-analysis2#int-decision-var" shape="rect">integer decision variable</a></span></h2>
<p>How to declare a decision variable to be integer valued.</p>
<p><strong>matlab:</strong></p>
<p>The solvers which ship with CVX do not support integer programming.</p>
<p><a name="binary-decision-var-note" shape="rect" id="binary-decision-var-note"></a></p>
<h2 id="toc72"><span><a href="numerical-analysis2#binary-decision-var" shape="rect">binary decision variable</a></span></h2>
<p>How to declare a decision variable to only take the values 0 or 1.</p>
<p><a name="polynomials-note" shape="rect" id="polynomials-note"></a></p>
<h1 id="toc73"><span><a href="numerical-analysis2#polynomials" shape="rect">Polynomials</a></span></h1>
<h2 id="toc74"><span>exact polynomial fit</span></h2>
<p><a name="cubic-spline-note" shape="rect" id="cubic-spline-note"></a></p>
<h2 id="toc75"><span><a href="numerical-analysis2#cubic-spline" shape="rect">cubic spline</a></span></h2>
<p>How to connect the dots of a data set with a line which has a continuous 2nd derivative.</p>
<p><a name="descriptive-statistics-note" shape="rect" id="descriptive-statistics-note"></a></p>
<h1 id="toc76"><span><a href="numerical-analysis2#descriptive-statistics" shape="rect">Descriptive Statistics</a></span></h1>
<p>A statistic is a single number which summarizes a population of data. The most familiar example is the mean or average. Statistics defined for discrete populations can often be meaningfully extended to continuous distributions by replacing summations with integration.</p>
<p>An important class of statistics are the nth moments. The nth moment <span class="math-inline">
      $$\mu'_n$$
    </span> of a population of <em>k</em> values <em>x<sub>i</sub></em> with mean <em><span style="white-space: pre-wrap;">μ</span></em> is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \mu'_n = \sum_{i=1}^k x_i^n \end{align}$$
    </div>
<p>The nth central moment <em><span style="white-space: pre-wrap;">μ</span><sub>n</sub></em> of the same population is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \mu_n = \sum_{i=1}^k (x_i - \mu)^n \end{align}$$
    </div>
<p><a name="first-moment-stats-note" shape="rect" id="first-moment-stats-note"></a></p>
<h2 id="toc77"><span><a href="numerical-analysis2#first-moment-stats" shape="rect">first moment statistics</a></span></h2>
<p>The sum and the mean.</p>
<p>The mean is the first moment. It is one definition of the center of the population. The median and the mode are also used to define the center. In most populations they will be close to but not identical to the mean.</p>
<p><a name="second-moment-stats-note" shape="rect" id="second-moment-stats-note"></a></p>
<h2 id="toc78"><span><a href="numerical-analysis2#second-moment-stats" shape="rect">second moment statistics</a></span></h2>
<p>The variance and the standard deviation. The variance is the second central moment. It is a measure of the spread or width of the population.</p>
<p>The standard deviation is the square root of the variance. It is also a measurement of population spread. The standard deviation has the same units of measurement as the data in the population.</p>
<p><a name="second-moment-stats-sample-note" shape="rect" id="second-moment-stats-sample-note"></a></p>
<h2 id="toc79"><span><a href="numerical-analysis2#second-moment-stats-sample" shape="rect">second moment statistics for samples</a></span></h2>
<p>The sample variance and sample standard deviation.</p>
<p><a name="skewness-note" shape="rect" id="skewness-note"></a></p>
<h2 id="toc80"><span><a href="numerical-analysis2#skewness" shape="rect">skewness</a></span></h2>
<p>The skewness of a population.</p>
<p>The skewness measures the asymmetricality of the population. The skewness will be negative, positive, or zero when the population is more spread out on the left, more spread out on the right, or similarly spread out on both sides, respectively.</p>
<p>The skewness can be calculated from the third moment and the standard deviation:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \gamma_1 = E\Big[\Big(\frac{x - \mu}{\sigma}\Big)^3\Big] = \frac{\mu_3}{\sigma^3} \end{align}$$
    </div>
<p>When estimating the population skewness from a sample a correction factor is often used, yielding the sample skewness:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{(n(n-1))^{\frac{1}{2}}}{n-2} \gamma_1 \end{align}$$
    </div>
<p><strong>octave and matlab:</strong></p>
<p>Octave uses the sample standard deviation to compute skewness. This behavior is different from Matlab and should possibly be regarded as a bug.</p>
<p>Matlab, but not Octave, will take a flag as a second parameter. When set to zero Matlab returns the sample skewness:</p>
<div class="code">
<pre xml:space="preserve">
<code>skewness(x, 0)</code>
</pre></div>
<p><strong>numpy:</strong></p>
<p>Set the named parameter <tt>bias</tt> to <tt>False</tt> to get the sample skewness:</p>
<div class="code">
<pre xml:space="preserve">
<code>stats.skew(x, bias=False)</code>
</pre></div>
<p><a name="kurtosis-note" shape="rect" id="kurtosis-note"></a></p>
<h2 id="toc81"><span><a href="numerical-analysis2#kurtosis" shape="rect">kurtosis</a></span></h2>
<p>The kurtosis of a population.</p>
<p>The formula for kurtosis is:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \gamma_2 = \frac{\mu_4}{\sigma^4} - 3 \end{align}$$
    </div>
<p>When kurtosis is negative the sides of a distribution tend to be more convex than when the kurtosis is is positive. A negative kurtosis distribution tends to have a wide, flat peak and narrow tails. Such a distribution is called platykurtic. A positive kurtosis distribution tends to have a narrow, sharp peak and long tails. Such a distribution is called leptokurtic.</p>
<p>The fourth standardized moment is</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \beta_2 = \frac{\mu_4}{\sigma^4} \end{align}$$
    </div>
<p>The fourth standardized moment is sometimes taken as the definition of kurtosis in older literature. The reason the modern definition is preferred is because it assigns the normal distribution a kurtosis of zero.</p>
<p><strong>matlab:</strong></p>
<p>Octave uses the sample standard deviation when computing kurtosis. This should probably be regarded as a bug.</p>
<p><strong>r:</strong></p>
<p>R uses the older fourth standardized moment definition of kurtosis.</p>
<p><a name="nth-moment-note" shape="rect" id="nth-moment-note"></a></p>
<h2 id="toc82"><span><a href="numerical-analysis2#nth-moment" shape="rect">nth moment and nth central moment</a></span></h2>
<p>How to compute the nth moment (also called the nth absolute moment) and the nth central moment for arbitrary <em>n</em>.</p>
<p><a name="mode-note" shape="rect" id="mode-note"></a></p>
<h2 id="toc83"><span><a href="numerical-analysis2#mode" shape="rect">mode</a></span></h2>
<p>The mode is the most common value in the sample.</p>
<p>The mode is a measure of central tendency like the mean and the median. A problem with the mean is that it can produce values not found in the data. For example the mean number of persons in an American household was 2.6 in 2009.</p>
<p>The mode might not be unique. If there are two modes the sample is said to be bimodal, and in general if there is more than one mode the sample is said to be multimodal.</p>
<p><a name="quantile-stats-note" shape="rect" id="quantile-stats-note"></a></p>
<h2 id="toc84"><span><a href="numerical-analysis2#quantile-stats" shape="rect">quantile statistics</a></span></h2>
<p>If the data is sorted from smallest to largest, the <em>minimum</em> is the first value, the <em>median</em> is the middle value, and the <em>maximum</em> is the last value. If there are an even number of data points, the median is the average of the two middle points. The median divides the population into two halves.</p>
<p>When the population is divided into four parts the division markers are called the first, second, and third <em>quartiles</em>. The <em>interquartile range</em> (IQR) is the difference between the 3rd and 1st quartiles.</p>
<p>When the population is divided into ten parts the division markers are called <em>deciles</em>.</p>
<p>When the population is divided into a hundred parts the division markers are called <em>percentiles</em>.</p>
<p>If the population is divided into <em>n</em> parts the markers are called the 1st, 2nd, …, (n-1)th n-<em>quantiles</em>.</p>
<p><a name="bivariate-stats-note" shape="rect" id="bivariate-stats-note"></a></p>
<h2 id="toc85"><span><a href="numerical-analysis2#bivariate-stats" shape="rect">bivariate statistics</a></span></h2>
<p>The correlation and the covariance.</p>
<p>The correlation is a number from -1 to 1. It is a measure of the linearity of the data, with values of -1 and 1 representing indicating a perfectly linear relationship. When the correlation is positive the quantities tend to increase together and when the correlation is negative one quantity will tend to increase as the other decreases.</p>
<p>A variable can be completely dependent on another and yet the two variables can have zero correlation. This happens for Y = X<sup>2</sup> where uniform X on the interval [-1, 1]. <a href="http://en.wikipedia.org/wiki/Anscombe's_quartet" shape="rect">Anscombe's quartet</a> gives four examples of data sets each with the same fairly high correlation 0.816 and yet which show significant qualitative differences when plotted.</p>
<p>The covariance is defined by</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} E[X -\mu_X)(Y- \mu_Y)] \end{align}$$
    </div>
<p>The correlation is the normalized version of the covariance. It is defined by</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{E[X -\mu_X)(Y- \mu_Y)]}{\sigma_X \sigma_Y} \end{align}$$
    </div>
<p><a name="correlation-matrix-note" shape="rect" id="correlation-matrix-note"></a></p>
<h2 id="toc86"><span><a href="numerical-analysis2#correlation-matrix" shape="rect">correlation matrix</a></span></h2>
<p><a name="freq-table-note" shape="rect" id="freq-table-note"></a></p>
<h2 id="toc87"><span><a href="numerical-analysis2#freq-table" shape="rect">data set to frequency table</a></span></h2>
<p>How to compute the frequency table for a data set. A frequency table counts how often each value occurs in the data set.</p>
<p><strong>r:</strong></p>
<p>The <tt>table</tt> function returns an object of type <tt>table</tt>.</p>
<p><a name="invert-freq-table-note" shape="rect" id="invert-freq-table-note"></a></p>
<h2 id="toc88"><span><a href="numerical-analysis2#invert-freq-table" shape="rect">frequency table to data set</a></span></h2>
<p>How to convert a frequency table back into the original data set.</p>
<p>The order of the original data set is not preserved.</p>
<p><a name="bin-note" shape="rect" id="bin-note"></a></p>
<h2 id="toc89"><span><a href="numerical-analysis2#bin" shape="rect">bin</a></span></h2>
<p>How to bin a data set. The result is a frequency table where each frequency represents the number of samples from the data set for an interval.</p>
<p><strong>r:</strong></p>
<p>The <tt>cut</tt> function returns a <tt>factor</tt>.</p>
<p>A <tt>labels</tt> parameter can be provided with a vector argument to assign the bins names. Otherwise bin names are constructed from the breaks using "[0.0,1.0)" style notation.</p>
<p>The <tt>hist</tt> function can be used to bin a data set:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = c(1.1, 3.7, 8.9, 1.2, 1.9, 4.1)
hist(x, breaks=c(0, 3, 6, 9), plot=FALSE)</code>
</pre></div>
<p><tt>hist</tt> returns an object of type <tt>histogram</tt>. The counts are in the <tt>$counts</tt> attribute.</p>
<p><a name="distribution-note" shape="rect" id="distribution-note"></a></p>
<h1 id="toc90"><span><a href="numerical-analysis2#distributions" shape="rect">Distributions</a></span></h1>
<p>A distribution density function <em>f(x)</em> is a non-negative function which, when integrated over its entire domain is equal to one. The distributions described in this sheet have as their domain the real numbers. The support of a distribution is the part of the domain on which the density function is non-zero.</p>
<p>A distribution density function can be used to describe the values one is likely to see when drawing an example from a population. Values in areas where the density function is large are more likely than values in areas where the density function is small. Values where there density function is zero do not occur. Thus it can be useful to plot the density function.</p>
<p>To derive probabilities from a density function one must integrate or use the associated cumulative density function</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} F(x) = \int_{-\infty}^x f(t) dt \end{align}$$
    </div>
<p>which gives the probability of seeing a value less than or equal to <em>x</em>. As probabilities are non-negative and no greater than one, <em>F</em> is a function from (-<span style="white-space: pre-wrap;">∞</span>, <span style="white-space: pre-wrap;">∞</span>) to [0,1]. The inverse of F is called the inverse cumulative distribution function or the quantile function for the distribution.</p>
<p>For each distribution statistical software will generally provide four functions: the density, the cumulative distribution, the quantile, and a function which returns random numbers in frequencies that match the distribution. If the software does not provide a random number generating function for the distribution, the quantile function can be composed with the built-in random number generator that most languages have as long as it returns uniformly distributed floats from the interval [0, 1].</p>
<table class="wiki-content-table"><tr><td rowspan="1" colspan="1">density<br />
probability density<br />
probability mass</td><td rowspan="1" colspan="1">cumulative density<br />
cumulative distribution<br />
distribution</td><td rowspan="1" colspan="1">inverse cumulative density<br />
inverse cumulative distribution<br />
quantile<br />
percentile<br />
percent point</td><td rowspan="1" colspan="1">random variate</td></tr></table>
<p>Discrete distributions such as the binomial and the poisson do not have density functions in the normal sense. Instead they have probability mass functions which assign probabilities which sum up to one to the integers. In R warnings will be given if non integer values are provided to the mass functions <tt>dbinom</tt> and <tt>dpoiss</tt>.</p>
<p>The cumulative distribution function of a discrete distribution can still be defined on the reals. Such a function is constant except at the integers where it may have jump discontinuities.</p>
<p>Most well known distributions are in fact parametrized families of distributions. <a href="distributions" shape="rect">This table</a> lists some of them with their parameters and properties.</p>
<p>The information entropy of a continuous distribution with density <em>f(x)</em> is defined as:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} -\int_\mathbb{R} f(x) \; \log(f(x)) \; dx \end{align}$$
    </div>
<p>In Bayesian analysis the distribution with the greatest entropy, subject to the known facts about the distribution, is called the maximum entropy probability distribution. It is considered the best distribution for modeling the current state of knowledge.</p>
<p><a name="binomial-note" shape="rect" id="binomial-note"></a></p>
<h2 id="toc91"><span><a href="numerical-analysis2#binomial" shape="rect">binomial</a></span></h2>
<p>The probability mass, cumulative distribution, quantile, and random number generating functions for the binomial distribution.</p>
<p>The binomial distribution is a discrete distribution. It models the number of successful trails when <em>n</em> is the number of trials and <em>p</em> is the chance of success for each trial. An example is the number of heads when flipping a coin 100 times. If the coin is fair then <em>p</em> is 0.50.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a binomial distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.binomial(n, p)</code>
</pre></div>
<p><a name="poisson-note" shape="rect" id="poisson-note"></a></p>
<h2 id="toc92"><span><a href="numerical-analysis2#poisson" shape="rect">poisson</a></span></h2>
<p>The probability mass, cumulative distribution, quantile, and random number generating functions for the Poisson distribution.</p>
<p>The Poisson distribution is a discrete distribution. It is described by a parameter <em>lam</em> which is the mean value for the distribution. The Poisson distribution is used to model events which happen at a specified average rate and independently of each other. Under these circumstances the time between successive events will be described by an exponential distribution and the events are said to be described by a poisson process.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a Poisson distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.poisson(lam, size=1)</code>
</pre></div>
<p><a name="normal-note" shape="rect" id="normal-note"></a></p>
<h2 id="toc93"><span><a href="numerical-analysis2#normal" shape="rect">normal</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the normal distribution.</p>
<p>The parameters are the mean <span style="white-space: pre-wrap;">μ</span> and the standard deviation <span style="white-space: pre-wrap;">σ</span>. The standard normal distribution has <span style="white-space: pre-wrap;">μ</span> of 0 and <span style="white-space: pre-wrap;">σ</span> of 1.</p>
<p>The normal distribution is the maximum entropy distribution for a given mean and variance. According to the central limit theorem, if {X<sub>1</sub>, …, X<sub>n</sub>} are any independent and identically distributed random variables with mean <span style="white-space: pre-wrap;">μ</span> and variance <span style="white-space: pre-wrap;">σ</span><sup>2</sup>, then S<sub>n</sub> := <span style="white-space: pre-wrap;">Σ</span> X<sub>i</sub> / n converges to a normal distribution with mean <span style="white-space: pre-wrap;">μ</span> and variance <span style="white-space: pre-wrap;">σ</span><sup>2</sup>/n.</p>
<p><strong>numpy:</strong></p>
<p>Random numbers in a normal distribution can also be generated with:</p>
<div class="code">
<pre xml:space="preserve">
<code>np.random.randn()</code>
</pre></div>
<p><a name="gamma-note" shape="rect" id="gamma-note"></a></p>
<h2 id="toc94"><span><a href="numerical-analysis2#gamma" shape="rect">gamma</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the gamma distribution.</p>
<p>The parameter <em>k</em> is called the shape parameter and <span style="white-space: pre-wrap;">θ</span> is called the scale parameter. The rate of the distribution is <span style="white-space: pre-wrap;">β</span> = 1/<span style="white-space: pre-wrap;">θ</span>.</p>
<p>If X<sub>i</sub> are <em>n</em> independent random variables with <span style="white-space: pre-wrap;">Γ</span>(k<sub>i</sub>, <span style="white-space: pre-wrap;">θ</span>) distribution, then <span style="white-space: pre-wrap;">Σ</span> X<sub>i</sub> has distribution <span style="white-space: pre-wrap;">Γ</span>(<span style="white-space: pre-wrap;">Σ</span> k<sub>i</sub>, <span style="white-space: pre-wrap;">θ</span>).</p>
<p>If X has <span style="white-space: pre-wrap;">Γ</span>(k, <span style="white-space: pre-wrap;">θ</span>) distribution, then <span style="white-space: pre-wrap;">α</span>X has <span style="white-space: pre-wrap;">Γ</span>(k, <span style="white-space: pre-wrap;">α</span><span style="white-space: pre-wrap;">θ</span>) distribution.</p>
<p><a name="exponential-note" shape="rect" id="exponential-note"></a></p>
<h2 id="toc95"><span><a href="numerical-analysis2#exponential" shape="rect">exponential</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the exponential distribution.</p>
<p><a name="chi-squared-note" shape="rect" id="chi-squared-note"></a></p>
<h2 id="toc96"><span><a href="numerical-analysis2#chi-squared" shape="rect">chi-squared</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the chi-squared distribution.</p>
<p><a name="beta-note" shape="rect" id="beta-note"></a></p>
<h2 id="toc97"><span><a href="numerical-analysis2#beta" shape="rect">beta</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the beta distribution.</p>
<p><a name="uniform-note" shape="rect" id="uniform-note"></a></p>
<h2 id="toc98"><span><a href="numerical-analysis2#uniform" shape="rect">uniform</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for the uniform distribution.</p>
<p>The uniform distribution is described by the parameters <em>a</em> and <em>b</em> which delimit the interval on which the density function is nonzero.</p>
<p>The uniform distribution the is maximum entropy probability distribution with support <em>[a, b]</em>.</p>
<p>Consider the uniform distribution on <em>[0, b]</em>. Suppose that we take <em>k</em> samples from it, and <em>m</em> is the largest of the samples. The minimum variance unbiased estimator for <em>b</em> is</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \frac{k+1}{k}m \end{align}$$
    </div>
<p><strong>octave, r, numpy:</strong></p>
<p><em>a</em> and <em>b</em> are optional parameters and default to 0 and 1 respectively.</p>
<p><a name="students-t-note" shape="rect" id="students-t-note"></a></p>
<h2 id="toc99"><span><a href="numerical-analysis2#students-t" shape="rect">Student's t</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for Student's t distribution.</p>
<p><a name="snedecors-f-note" shape="rect" id="snedecors-f-note"></a></p>
<h2 id="toc100"><span><a href="numerical-analysis2#snedecors-f" shape="rect">Snedecor's F</a></span></h2>
<p>The probability density, cumulative distribution, quantile, and random number generating functions for Snedecor's F distribution.</p>
<p><a name="empirical-density-func-note" shape="rect" id="empirical-density-func-note"></a></p>
<h2 id="toc101"><span><a href="numerical-analysis2#empirical-density-func" shape="rect">empirical density function</a></span></h2>
<p>How to construct a density function from a sample.</p>
<p><a name="empirical-cumulative-distribution-note" shape="rect" id="empirical-cumulative-distribution-note"></a></p>
<h2 id="toc102"><span><a href="numerical-analysis2#empirical-cumulative-distribution" shape="rect">empirical cumulative distribution</a></span></h2>
<p><a name="empirical-quantile-func-note" shape="rect" id="empirical-quantile-func-note"></a></p>
<h2 id="toc103"><span><a href="numerical-analysis2#empirical-quantile-func" shape="rect">empirical quantile function</a></span></h2>
<p><a name="linear-regression-note" shape="rect" id="linear-regression-note"></a></p>
<h1 id="toc104"><span><a href="numerical-analysis2#linear-regression" shape="rect">Linear Regression</a></span></h1>
<p><a name="simple-linear-regression-note" shape="rect" id="simple-linear-regression-note"></a></p>
<h2 id="toc105"><span><a href="numerical-analysis2#simple-linear-regression" shape="rect">simple linear regression</a></span></h2>
<p>How to get the slope <em>a</em> and intercept <em>b</em> for a line which best approximates the data. How to get the residuals.</p>
<p>If there are more than two data points, then the system is overdetermined and in general there is no solution for the slope and the intercept. Linear regression looks for line that fits the points as best as possible. The least squares solution is the line that minimizes the sum of the square of the distances of the points from the line.</p>
<p>The residuals are the difference between the actual values of <em>y</em> and the calculated values using <em>ax + b</em>. The norm of the residuals can be used as a measure of the goodness of fit.</p>
<p><a name="linear-regression-no-intercept-note" shape="rect" id="linear-regression-no-intercept-note"></a></p>
<h2 id="toc106"><span><a href="numerical-analysis2#linear-regression-no-intercept" shape="rect">no intercept</a></span></h2>
<p><a name="multiple-linear-regression-note" shape="rect" id="multiple-linear-regression-note"></a></p>
<h2 id="toc107"><span><a href="numerical-analysis2#multiple-linear-regression" shape="rect">multiple linear regression</a></span></h2>
<p><a name="linear-regression-interaction-note" shape="rect" id="linear-regression-interaction-note"></a></p>
<h2 id="toc108"><span><a href="numerical-analysis2#linear-regression-interaction" shape="rect">interaction</a></span></h2>
<p><a name="logistic-regression-note" shape="rect" id="logistic-regression-note"></a></p>
<h2 id="toc109"><span><a href="numerical-analysis2#logistic-regression" shape="rect">logistic regression</a></span></h2>
<p><a name="statistical-tests-note" shape="rect" id="statistical-tests-note"></a></p>
<h1 id="toc110"><span><a href="numerical-analysis2#statistical-tests" shape="rect">Statistical Tests</a></span></h1>
<p>A selection of statistical tests. For each test the null hypothesis of the test is stated in the left column.</p>
<p>In a null hypothesis test one considers the <em>p-value</em>, which is the chance of getting data which is as or more extreme than the observed data if the null hypothesis is true. The null hypothesis is usually a supposition that the data is drawn from a distribution with certain parameters.</p>
<p>The extremeness of the data is determined by comparing the expected value of a parameter according to the null hypothesis to the estimated value from the data. Usually the parameter is a mean or variance. In a <em>one-tailed test</em> the p-value is the chance the difference is greater than the observed amount; in a <em>two-tailed test</em> the p-value is the chance the absolute value of the difference is greater than the observed amount.</p>
<p>Octave and MATLAB have different names for the statistical test functions. The sheet shows the Octave functions; the corresponding MATLAB functions are:</p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1">octave</th><th rowspan="1" colspan="1">matlab</th></tr><tr><td rowspan="1" colspan="1">wilcoxon_test</td><td rowspan="1" colspan="1">ranksum</td></tr><tr><td rowspan="1" colspan="1">kruskal_wallis_test</td><td rowspan="1" colspan="1">kruskalwallis</td></tr><tr><td rowspan="1" colspan="1">kolmogorov_smirnov_test</td><td rowspan="1" colspan="1">kstest</td></tr><tr><td rowspan="1" colspan="1">kolmogorov_smirnov_test_2</td><td rowspan="1" colspan="1">kstest2</td></tr><tr><td rowspan="1" colspan="1">t_test</td><td rowspan="1" colspan="1">ttest</td></tr><tr><td rowspan="1" colspan="1">t_test_2</td><td rowspan="1" colspan="1">ttest2</td></tr></table>
<p><a name="wilcoxon-note" shape="rect" id="wilcoxon-note"></a></p>
<h2 id="toc111"><span><a href="numerical-analysis2#wilcoxon" shape="rect">wilcoxon signed-rank test</a></span></h2>
<p><strong>matlab</strong></p>
<p><tt>wilcoxon_test()</tt> is an Octave function. The MATLAB function is <tt>ranksum()</tt>.</p>
<p><a name="kruskal-note" shape="rect" id="kruskal-note"></a></p>
<h2 id="toc112"><span><a href="numerical-analysis2#kruskal" shape="rect">kruskal-wallis rank sum test</a></span></h2>
<p><a name="kolmogorov-smirnov-test-note" shape="rect" id="kolmogorov-smirnov-test-note"></a></p>
<h2 id="toc113"><span><a href="numerical-analysis2#kolmogorov-smirnov-test" shape="rect">kolmogorov-smirnov test</a></span></h2>
<p>Test whether two samples are drawn from the same distribution.</p>
<p><strong>matlab:</strong></p>
<p><tt>kolmogorov_smirnov_test_2()</tt> and <tt>kolmogorov_smirnov_test()</tt> are Octave functions. The corresponding MATLAB functions are <tt>kstest2()</tt> and <tt>kstest()</tt>.</p>
<p><tt>kolmogorov_smirnov_test()</tt> is a one sample test; it tests whether a sample is drawn from one of the standard continuous distributions. A one sample KS test gives a repeatable p-value; generating a sample and using a two sample KS test does not.</p>
<div class="code">
<pre xml:space="preserve">
<code>x = randn(100, 1)

% null hypothesis is true:
kolmogorov_smirnov_test(x, "norm", 0, 1)

% alternative hypothesis is true:
kolmogorov_smirnov_test(x, "unif", -0.5, 0.5)</code>
</pre></div>
<p><strong>r:</strong></p>
<p><a name="one-sample-t-test-note" shape="rect" id="one-sample-t-test-note"></a></p>
<h2 id="toc114"><span><a href="numerical-analysis2#one-sample-t-test" shape="rect">one-sample t-test</a></span></h2>
<p><a name="independent-two-sample-t-test-note" shape="rect" id="independent-two-sample-t-test-note"></a></p>
<h2 id="toc115"><span><a href="numerical-analysis2#independent-two-sample-t-test" shape="rect">independent two-sample t-test</a></span></h2>
<p>Test whether two normal variables have same mean.</p>
<p><strong>r:</strong></p>
<p>If the normal variables are known to have the same variance, the variance can be pooled to estimate standard error:</p>
<div class="code">
<pre xml:space="preserve">
<code>t.test(x, y, var.equal=T)</code>
</pre></div>
<p>If the variance cannot be pooled, then Welch's t-test is used. This uses a lower (often non-integral) degrees-of-freedom value, which in turn results in a higher p-value.</p>
<p><a name="one-sample-binomial-test-note" shape="rect" id="one-sample-binomial-test-note"></a></p>
<h2 id="toc116"><span><a href="numerical-analysis2#one-sample-binomial-test" shape="rect">one-sample binomial test</a></span></h2>
<p><a name="two-sample-binomial-test-note" shape="rect" id="two-sample-binomial-test-note"></a></p>
<h2 id="toc117"><span><a href="numerical-analysis2#two-sample-binomial-test" shape="rect">two-sample binomial test</a></span></h2>
<p><a name="chi-squared-test-note" shape="rect" id="chi-squared-test-note"></a></p>
<h2 id="toc118"><span><a href="numerical-analysis2#chi-squared-test" shape="rect">chi-squared test</a></span></h2>
<p><a name="poisson-test-note" shape="rect" id="poisson-test-note"></a></p>
<h2 id="toc119"><span><a href="numerical-analysis2#poisson-test" shape="rect">poisson test</a></span></h2>
<p><a name="f-test-note" shape="rect" id="f-test-note"></a></p>
<h2 id="toc120"><span><a href="numerical-analysis2#f-test" shape="rect">F test</a></span></h2>
<p><a name="pearson-product-moment-test-note" shape="rect" id="pearson-product-moment-test-note"></a></p>
<h2 id="toc121"><span><a href="numerical-analysis2#pearson-product-moment-test" shape="rect">pearson product moment test</a></span></h2>
<p><a name="shapiro-wilk-test-note" shape="rect" id="shapiro-wilk-test-note"></a></p>
<h2 id="toc122"><span><a href="numerical-analysis2#shapiro-wilk-test" shape="rect">shapiro-wilk test</a></span></h2>
<p><a name="bartletts-test-note" shape="rect" id="bartletts-test-note"></a></p>
<h2 id="toc123"><span><a href="numerical-analysis2#bartletts-test" shape="rect">bartlett's test</a></span></h2>
<p>A test whether variables are drawn from normal distributions with the same variance.</p>
<p><a name="levene-test-note" shape="rect" id="levene-test-note"></a></p>
<h2 id="toc124"><span><a href="numerical-analysis2#levene-test" shape="rect">levene's test</a></span></h2>
<p>A test whether variables are drawn from distributions with the same variance.</p>
<p><a name="one-way-anova-note" shape="rect" id="one-way-anova-note"></a></p>
<h2 id="toc125"><span><a href="numerical-analysis2#one-way-anova" shape="rect">one-way anova</a></span></h2>
<p><a name="time-series-note" shape="rect" id="time-series-note"></a></p>
<h1 id="toc126"><span><a href="numerical-analysis2#time-series" shape="rect">Time Series</a></span></h1>
<p>A <em>time series</em> is a sequence of data points collected repeatedly on a uniform time interval.</p>
<p>A time series can be represented by a dictionary which maps timestamps to the type of the data points. A more efficient implementation exploits the fact that the time interval is uniform and stores the data points in an array. To recover the timestamps of the data points, the timestamp of the first data point and the length of the time interval are also stored.</p>
<p><a name="time-series-construction-note" shape="rect" id="time-series-construction-note"></a></p>
<h2 id="toc127"><span><a href="numerical-analysis2#time-series-construction" shape="rect">time series</a></span></h2>
<p>How to create a time series from an array.</p>
<p><a name="monthly-time-series-note" shape="rect" id="monthly-time-series-note"></a></p>
<h2 id="toc128"><span><a href="numerical-analysis2#monthly-time-series" shape="rect">monthly time series</a></span></h2>
<p>How to create a time series with one data point per month.</p>
<p><a name="time-series-lookup-time-note" shape="rect" id="time-series-lookup-time-note"></a></p>
<h2 id="toc129"><span><a href="numerical-analysis2#time-series-lookup-time" shape="rect">lookup by time</a></span></h2>
<p>How to get to a data point in a time series by when the data point was collected.</p>
<p><a name="time-series-lookup-position-note" shape="rect" id="time-series-lookup-position-note"></a></p>
<h2 id="toc130"><span><a href="numerical-analysis2#time-series-lookup-position" shape="rect">lookup by position in series</a></span></h2>
<p>How to get a data point in a time series by its ordinal position.</p>
<p><a name="aligned-arithmetic-note" shape="rect" id="aligned-arithmetic-note"></a></p>
<h2 id="toc131"><span><a href="numerical-analysis2#aligned-arithmetic" shape="rect">aligned arithmetic</a></span></h2>
<p><a name="lagged-difference-note" shape="rect" id="lagged-difference-note"></a></p>
<h2 id="toc132"><span><a href="numerical-analysis2#lagged-difference" shape="rect">lagged difference</a></span></h2>
<p><a name="simple-moving-avg-note" shape="rect" id="simple-moving-avg-note"></a></p>
<h2 id="toc133"><span><a href="numerical-analysis2#simple-moving-avg" shape="rect">simple moving average</a></span></h2>
<p><a name="weighted-moving-avg-note" shape="rect" id="weighted-moving-avg-note"></a></p>
<h2 id="toc134"><span><a href="numerical-analysis2#weighted-moving-avg" shape="rect">weighted moving average</a></span></h2>
<p><a name="exponential-smoothing-note" shape="rect" id="exponential-smoothing-note"></a></p>
<h2 id="toc135"><span><a href="numerical-analysis2#exponential-smoothing" shape="rect">exponential smoothing</a></span></h2>
<p><a name="decompose-seasonal-trend-note" shape="rect" id="decompose-seasonal-trend-note"></a></p>
<h2 id="toc136"><span><a href="numerical-analysis2#decompose-seasonal-trend" shape="rect">decompose into seasonal and trend</a></span></h2>
<p><a name="correlogram-note" shape="rect" id="correlogram-note"></a></p>
<h2 id="toc137"><span><a href="numerical-analysis2#correlogram" shape="rect">correlogram</a></span></h2>
<p><a name="arima-note" shape="rect" id="arima-note"></a></p>
<h2 id="toc138"><span><a href="numerical-analysis2#arima" shape="rect">arima</a></span></h2>
<p><a name="fast-fourier-transform-note" shape="rect" id="fast-fourier-transform-note"></a></p>
<h1 id="toc139"><span><a href="numerical-analysis2#fast-fourier-transform" shape="rect">Fast Fourier Transform</a></span></h1>
<p><a name="fft-note" shape="rect" id="fft-note"></a></p>
<h2 id="toc140"><span>[<a href="javascript:;" shape="rect">fft fft</a></span></h2>
<p><a name="ifft-note" shape="rect" id="ifft-note"></a></p>
<h2 id="toc141"><span><a href="numerical-analysis2#ifft" shape="rect">inverse fft</a></span></h2>
<p><a name="fftshift-note" shape="rect" id="fftshift-note"></a></p>
<h2 id="toc142"><span><a href="numerical-analysis2#fftshift" shape="rect">shift constant component to center</a></span></h2>
<p><a name="fft2-note" shape="rect" id="fft2-note"></a></p>
<h2 id="toc143"><span><a href="numerical-analysis2#fft2" shape="rect">two-dimensional fft</a></span></h2>
<p><a name="fftn-note" shape="rect" id="fftn-note"></a></p>
<h2 id="toc144"><span><a href="numerical-analysis2#fftn" shape="rect">n-dimensional fft</a></span></h2>
<p><a name="clustering-note" shape="rect" id="clustering-note"></a></p>
<h1 id="toc145"><span><a href="numerical-analysis2#clustering" shape="rect">Clustering</a></span></h1>
<p><a name="images-note" shape="rect" id="images-note"></a></p>
<h1 id="toc146"><span><a href="numerical-analysis2#images" shape="rect">Images</a></span></h1>
<p><a name="sound-note" shape="rect" id="sound-note"></a></p>
<h1 id="toc147"><span><a href="numerical-analysis2#sound" shape="rect">Sound</a></span></h1>
<p><a name="bar-charts-note" shape="rect" id="bar-charts-note"></a></p>
<h1 id="toc148"><span><a href="numerical-analysis2#bar-charts" shape="rect">Bar Charts</a></span></h1>
<p><a name="vertical-bar-chart-note" shape="rect" id="vertical-bar-chart-note"></a></p>
<h2 id="toc149"><span><a href="numerical-analysis2#vertical-bar-chart" shape="rect">vertical bar chart</a></span></h2>
<p>A chart in which numerical values are represented by horizontal bars. The bars are aligned at the bottom.</p>
<p><a name="horizontal-bar-chart-note" shape="rect" id="horizontal-bar-chart-note"></a></p>
<h2 id="toc150"><span><a href="numerical-analysis2#horizontal-bar-chart" shape="rect">horizontal bar chart</a></span></h2>
<p>A bar chart with horizontal bars which are aligned on the left.</p>
<p><a name="grouped-bar-chart-note" shape="rect" id="grouped-bar-chart-note"></a></p>
<h2 id="toc151"><span><a href="numerical-analysis2#grouped-bar-chart" shape="rect">grouped bar chart</a></span></h2>
<p>Optionally data sets with a common set of labels can be charted with a grouped bar chart which clusters the bars for each label. The grouped bar chart makes it easier to perform comparisons between labels for each data set.</p>
<p><a name="stacked-bar-chart-note" shape="rect" id="stacked-bar-chart-note"></a></p>
<h2 id="toc152"><span><a href="numerical-analysis2#stacked-bar-chart" shape="rect">stacked bar chart</a></span></h2>
<p>Two or more data sets with a common set of labels can be charted with a stacked bar chart. This makes the sum of the data sets for each label readily apparent.</p>
<p><a name="pie-chart-note" shape="rect" id="pie-chart-note"></a></p>
<h2 id="toc153"><span><a href="numerical-analysis2#pie-chart" shape="rect">pie chart</a></span></h2>
<p>A pie chart displays values using the areas of circular sectors or equivalently the lengths of the arcs of those sectors.</p>
<p>A pie chart implies that the values are percentages of a whole.</p>
<p><a name="histogram-note" shape="rect" id="histogram-note"></a></p>
<h2 id="toc154"><span><a href="numerical-analysis2#histogram" shape="rect">histogram</a></span></h2>
<p>A histogram is a bar chart where each bar represents a range of values that the data points can fall in. The data is tabulated to find out how often data points fall in each of the bins and in the final chart the length of the bars corresponds to the frequency.</p>
<p>A common method for choosing the number of bins using the number of data points is Sturges' formula:</p>

<div class="math-inline" style="display; block;">
      $$\begin{align} \lceil \log_2{x} + 1 \rceil \end{align}$$
    </div>
<p><a name="box-plot-note" shape="rect" id="box-plot-note"></a></p>
<h2 id="toc155"><span><a href="numerical-analysis2#box-plot" shape="rect">box plot</a></span></h2>
<p>Also called a box-and-whisker plot.</p>
<p>The box shows the locations of the 1st quartile, median, and 3rd quartile. These are the same as the 25th percentile, 50th percentile, and 75th percentile.</p>
<p>The whiskers are sometimes used to show the maximum and minimum values of the data set. Outliers are sometimes shown explicitly with dots, in which case all remaining data points occur inside the whiskers.</p>
<p><strong>r:</strong></p>
<p>How to create a box plot with <tt>ggplot2</tt>:</p>
<div class="code">
<pre xml:space="preserve">
<code>qplot(x="rnorm", y=rnorm(50), geom="boxplot")

qplot(x=c("rnorm", "rexp", "runif"), y=c(rnorm(50), rexp(50), runif(50)), geom="boxplot")</code>
</pre></div>
<p><a name="scatter-plots-note" shape="rect" id="scatter-plots-note"></a></p>
<h1 id="toc156"><span><a href="numerical-analysis2#scatter-plots" shape="rect">Scatter Plots</a></span></h1>
<p><a name="scatter-plot-note" shape="rect" id="scatter-plot-note"></a></p>
<h2 id="toc157"><span><a href="numerical-analysis2#scatter-plot" shape="rect">scatter plot</a></span></h2>
<p>A scatter plot can be used to determine if two variables are correlated.</p>
<p><strong>r:</strong></p>
<p>How to make a scatter plot with <tt>ggplot</tt>:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = rnorm(50)
y = rnorm(50)
p = ggplot(data.frame(x, y), aes(x, y))
p = p + layer(geom="point")
p</code>
</pre></div>
<p><a name="additional-point-set-note" shape="rect" id="additional-point-set-note"></a></p>
<h2 id="toc158"><span><a href="numerical-analysis2#additional-point-set" shape="rect">additional point set</a></span></h2>
<p><a name="point-types-note" shape="rect" id="point-types-note"></a></p>
<h2 id="toc159"><span><a href="numerical-analysis2#point-types" shape="rect">point types</a></span></h2>
<p><a name="hexagonal-bins-note" shape="rect" id="hexagonal-bins-note"></a></p>
<h2 id="toc160"><span><a href="numerical-analysis2#hexagonal-bins" shape="rect">hexagonal bins</a></span></h2>
<p>A hexagonal binning is the two-dimensional analog of a histogram. The number of data points in each hexagon is tabulated, and then color or grayscale is used to show the frequency.</p>
<p>A hexagonal binning is superior to a scatter-plot when the number of data points is high because most scatter-plot software doesn't indicate when points are occur on top of each other.</p>
<p><a name="scatter-plot-3d-note" shape="rect" id="scatter-plot-3d-note"></a></p>
<h2 id="toc161"><span><a href="numerical-analysis2#scatter-plot-3d" shape="rect">3d scatter plot</a></span></h2>
<p><a name="bubble-chart-note" shape="rect" id="bubble-chart-note"></a></p>
<h2 id="toc162"><span><a href="numerical-analysis2#bubble-chart" shape="rect">bubble chart</a></span></h2>
<p><a name="scatter-plot-matrix-note" shape="rect" id="scatter-plot-matrix-note"></a></p>
<h2 id="toc163"><span><a href="numerical-analysis2#scatter-plot-matrix" shape="rect">scatter plot matrix</a></span></h2>
<p><a name="linear-regression-line-note" shape="rect" id="linear-regression-line-note"></a></p>
<h2 id="toc164"><span><a href="numerical-analysis2#linear-regression-line" shape="rect">linear regression line</a></span></h2>
<p>How to plot a line determined by linear regression on top of a scatter plot.</p>
<p><a name="q-q-plot-note" shape="rect" id="q-q-plot-note"></a></p>
<h2 id="toc165"><span><a href="numerical-analysis2#q-q-plot" shape="rect">quantile-quantile plot</a></span></h2>
<p>Also called a Q-Q plot.</p>
<p>A quantile-quantile plot is a scatter plot created from two data sets. Each point depicts the quantile of the first data set with its x position and the corresponding quantile of the second data set with its y position.</p>
<p>If the data sets are drawn from the same distribution then most of the points should be close to the line y = x. If the data sets are drawn from distributions which have a linear relation then the Q-Q plot should also be close to linear.</p>
<p>If the two data sets have the same number of elements, one can simply sort them and create the scatterplot.</p>
<p>If the number of elements is different, one generates a set of quantiles (such as percentiles) for each set. The <tt>quantile</tt> function of MATLAB and R is convenient for this. With Python, one can use <tt>scipy.stats.scoreatpercentile</tt>.</p>
<p><a name="line-charts-note" shape="rect" id="line-charts-note"></a></p>
<h1 id="toc166"><span><a href="numerical-analysis2#line-charts" shape="rect">Line Charts</a></span></h1>
<p><a name="polygonal-plot-note" shape="rect" id="polygonal-plot-note"></a></p>
<h2 id="toc167"><span><a href="numerical-analysis2#polygonal-plot" shape="rect">polygonal line plot</a></span></h2>
<p>How to connect the dots of a data set with a polygonal line.</p>
<p><a name="additional-line-note" shape="rect" id="additional-line-note"></a></p>
<h2 id="toc168"><span><a href="numerical-analysis2#additional-line" shape="rect">additional line</a></span></h2>
<p>How to add another line to a plot.</p>
<p><a name="line-types-note" shape="rect" id="line-types-note"></a></p>
<h2 id="toc169"><span><a href="numerical-analysis2#line-types" shape="rect">line types</a></span></h2>
<p><a name="function-plot-note" shape="rect" id="function-plot-note"></a></p>
<h2 id="toc170"><span><a href="numerical-analysis2#function-plot" shape="rect">function plot</a></span></h2>
<p>How to plot a function.</p>
<p><a name="area-chart-note" shape="rect" id="area-chart-note"></a></p>
<h2 id="toc171"><span><a href="numerical-analysis2#area-chart" shape="rect">stacked area chart</a></span></h2>
<p><a name="overlapping-area-chart-note" shape="rect" id="overlapping-area-chart-note"></a></p>
<h2 id="toc172"><span><a href="numerical-analysis2#overlapping-area-chart" shape="rect">overlapping area chart</a></span></h2>
<p><a name="surface-charts-note" shape="rect" id="surface-charts-note"></a></p>
<h1 id="toc173"><span><a href="numerical-analysis2#surface-charts" shape="rect">Surface Charts</a></span></h1>
<p><a name="contour-plot-note" shape="rect" id="contour-plot-note"></a></p>
<h2 id="toc174"><span><a href="numerical-analysis2#contour-plot" shape="rect">contour plot</a></span></h2>
<p><a name="chart-options-note" shape="rect" id="chart-options-note"></a></p>
<h1 id="toc175"><span><a href="numerical-analysis2#chart-options" shape="rect">Chart Options</a></span></h1>
<p><a name="chart-title-note" shape="rect" id="chart-title-note"></a></p>
<h2 id="toc176"><span><a href="numerical-analysis2#chart-title" shape="rect">chart title</a></span></h2>
<p>How to set the chart title.</p>
<p><strong>r:</strong></p>
<p>The <tt>qplot</tt> commands supports the <tt>main</tt> options for setting the title:</p>
<div class="code">
<pre xml:space="preserve">
<code>qplot(x="rnorm", y=rnorm(50), geom="boxplot", main="boxplot example")</code>
</pre></div>
<p><a name="axis-labels-note" shape="rect" id="axis-labels-note"></a></p>
<h2 id="toc177"><span><a href="numerical-analysis2#axis-labels" shape="rect">axis labels</a></span></h2>
<p>How to label the x and y axes.</p>
<p><strong>r:</strong></p>
<p>How to label the axes with ggplot2:</p>
<div class="code">
<pre xml:space="preserve">
<code>x = rnorm(20)
y = x^2

p = ggplot(data.frame(x, y), aes(x, y))
p + layer(geom="point") + xlab('x') + ylab('x squared')</code>
</pre></div>
<p><a name="axis-limits-note" shape="rect" id="axis-limits-note"></a></p>
<h2 id="toc178"><span><a href="numerical-analysis2#axis-limits" shape="rect">axis limits</a></span></h2>
<p>How to manually set the range of values displayed by an axis.</p>
<p><a name="logarithmic-y-axis-note" shape="rect" id="logarithmic-y-axis-note"></a></p>
<h2 id="toc179"><span><a href="numerical-analysis2#logarithmic-y-axis" shape="rect">logarithmic y-axis</a></span></h2>
<p><a name="colors-note" shape="rect" id="colors-note"></a></p>
<h2 id="toc180"><span><a href="numerical-analysis2#colors" shape="rect">colors</a></span></h2>
<p>How to set the color of points and lines.</p>
<p><a name="superimposed-plots-note" shape="rect" id="superimposed-plots-note"></a></p>
<h2 id="toc181"><span><a href="numerical-analysis2#superimposed-plots" shape="rect">superimposed plots with different y-axis scales</a></span></h2>
<p>How to superimpose two plots with different y-axis scales.</p>
<p>To minimize the risk that the reader will read off an incorrect y-value for a data point, the example uses the same color for the y-axis as it does for the corresponding data set.</p>
<p><a name="legend-note" shape="rect" id="legend-note"></a></p>
<h2 id="toc182"><span><a href="numerical-analysis2#legend" shape="rect">legend</a></span></h2>
<p>How to put a legend on a chart.</p>
<p><strong>r:</strong></p>
<p>These strings can be used as the first argument to control the legend position:</p>
<ul><li>"bottomright"</li><li>"bottom"</li><li>"bottomleft"</li><li>"left"</li><li>"topleft"</li><li>"top"</li><li>"topright"</li><li>"right"</li><li>"center"</li></ul>
<p>The named parameter <tt>lwd</tt> is the line width. It is roughly the width in pixels, though the exact interpretation is device specific.</p>
<p>The named parameter <tt>lty</tt> specifies the line type. The value can be either an integer or a string:</p>
<table class="wiki-content-table"><tr><th rowspan="1" colspan="1">number</th><th rowspan="1" colspan="1">string</th></tr><tr><td rowspan="1" colspan="1">0</td><td rowspan="1" colspan="1">'blank'</td></tr><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">'solid'</td></tr><tr><td rowspan="1" colspan="1">2</td><td rowspan="1" colspan="1">'dashed'</td></tr><tr><td rowspan="1" colspan="1">3</td><td rowspan="1" colspan="1">'dotted'</td></tr><tr><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">'dotdash'</td></tr><tr><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">'longdash'</td></tr><tr><td rowspan="1" colspan="1">6</td><td rowspan="1" colspan="1">'twodash'</td></tr></table>
<p><a name="matlab" shape="rect" id="matlab"></a></p>
<h1 id="toc183"><span><a href="numerical-analysis2#top" shape="rect">MATLAB</a></span></h1>
<p><a href="http://www.gnu.org/software/octave/doc/interpreter/" shape="rect">Octave Manual</a><br />
<a href="http://www.mathworks.com/help/techdoc/" shape="rect">MATLAB Documentation</a><br />
<a href="http://en.wikibooks.org/wiki/MATLAB_Programming/Differences_between_Octave_and_MATLAB" shape="rect">Differences between Octave and MATLAB</a><br />
<a href="http://octave.sourceforge.net/packages.php" shape="rect">Octave-Forge Packages</a></p>
<p>The basic data type of MATLAB is a matrix of floats. There is no distinction between a scalar and a 1x1 matrix, and functions that work on scalars typically work on matrices as well by performing the scalar function on each entry in the matrix and returning the results in a matrix with the same dimensions. Operators such as the logical operators ('&amp;' '|' '!'), relational operators ('==', '!=', '&lt;', '&gt;'), and arithmetic operators ('+', '-') all work this way. However the multiplication '*' and division '/' operators perform matrix multiplication and matrix division, respectively. The <tt>.*</tt> and <tt>./</tt> operators are available if entry-wise multiplication or division is desired.</p>
<p>Floats are by default double precision; single precision can be specified with the <em>single</em> constructor. MATLAB has convenient matrix literal notation: commas or spaces can be used to separate row entries, and semicolons or newlines can be used to separate rows.</p>
<p>Arrays and vectors are implemented as single-row (<tt>1xn</tt>) matrices. As a result an <em>n</em>-element vector must be transposed before it can be multiplied on the right of a <tt>mxn</tt> matrix.</p>
<p>Numeric literals that lack a decimal point such as <em>17</em> and <em>-34</em> create floats, in contrast to most other programming languages. To create an integer, an integer constructor which specifies the size such as <em>int8</em> and <em>uint16</em> must be used. Matrices of integers are supported, but the entries in a given matrix must all have the same numeric type.</p>
<p>Strings are implemented as single-row (<tt>1xn</tt>) matrices of characters. Matrices cannot contain strings. If a string is put in matrix literal, each character in the string becomes an entry in the resulting matrix. This is consistent with how matrices are treated if they are nested inside another matrix. The following literals all yield the same string or <tt>1xn</tt> matrix of characters:</p>
<div class="code">
<pre xml:space="preserve">
<code>'foo'
[ 'f' 'o' 'o' ]
[ 'foo' ]
[ [ 'f' 'o' 'o' ] ]</code>
</pre></div>
<p><em>true</em> and <em>false</em> are functions which return matrices of ones and zeros. The ones and zeros have type <em>logical</em> instead of <em>double</em>, which is created by the literals 1 and 0. Other than having a different class, the 0 and 1 of type <em>logical</em> behave the same as the 0 and 1 of type <em>double</em>.</p>
<p>MATLAB has a tuple type (in MATLAB terminology, a cell array) which can be used to hold multiple strings. It can also hold values with different types.</p>
<p><a name="r" shape="rect" id="r"></a></p>
<h1 id="toc184"><span><a href="numerical-analysis2#top" shape="rect">R</a></span></h1>
<p><a href="http://cran.r-project.org/doc/manuals/R-intro.html" shape="rect">An Introduction to R</a><br />
<a href="http://adv-r.had.co.nz/" shape="rect">Advanced R Programming</a><br />
<a href="http://cran.r-project.org/" shape="rect">The Comprehensive R Archive Network</a></p>
<p>The primitive data types of R are vectors of floats, vectors of strings, and vectors of booleans. There is no distinction between a scalar and a vector with one entry in it. Functions and operators which accept a scalar argument will typically accept a vector argument, returning a vector of the same size with the scalar operation performed on each the entries of the original vector.</p>
<p>The scalars in a vector must all be of the same type, but R also provides a <em>list</em> data type which can be used as a tuple (entries accessed by index), record (entries accessed by name), or even as a dictionary.</p>
<p>In addition R provides a <em>data frame</em> type which is a list (in R terminology) of vectors all of the same length. Data frames are equivalent to the data sets of other statistical analysis packages.</p>
<p><a name="numpy" shape="rect" id="numpy"></a></p>
<h1 id="toc185"><span><a href="numerical-analysis2#top" shape="rect">NumPy</a></span></h1>
<p><a href="http://docs.scipy.org/doc/" shape="rect">NumPy and SciPy Documentation</a><br />
<a href="http://matplotlib.sourceforge.net/" shape="rect">matplotlib intro</a><br />
<a href="http://www.scipy.org/NumPy_for_Matlab_Users" shape="rect">NumPy for Matlab Users</a><br />
<a href="http://pandas.pydata.org/pandas-docs/stable/" shape="rect">Pandas Documentation</a><br />
<a href="http://pandas.pydata.org/pandas-docs/dev/genindex.html" shape="rect">Pandas Method/Attribute Index</a></p>
<p>NumPy is a Python library which provides a data type called <tt>array</tt>. It differs from the Python <tt>list</tt> data type in the following ways:</p>
<ul><li>N-dimensional. Although the <tt>list</tt> type can be nested to hold higher dimension data, the <tt>array</tt> can hold higher dimension data in a space efficient manner without using indirection.</li><li>homogeneous. The elements of an <tt>array</tt> are restricted to be of a specified type. The NumPy library introduces new primitive types not available in vanilla Python. However, the element type of an array can be <tt>object</tt> which permits storing anything in the array.</li></ul>
<p>In the reference sheet the <a href="numerical-analysis2#array" shape="rect">array section</a> covers the vanilla Python <tt>list</tt> and the <a href="numerical-analysis2#multidimensional-array" shape="rect">multidimensional array section</a> covers the NumPy <tt>array</tt>.</p>
<p><em>List the NumPy primitive types</em></p>
<p>SciPy, Matplotlib, and Pandas are libraries which depend on Numpy.</p>
<p><a name="julia" shape="rect" id="julia"></a></p>
<h1 id="toc186"><span><a href="numerical-analysis2#top" shape="rect">Julia</a></span></h1>
<p><a href="http://julialang.org/" shape="rect">http://julialang.org/</a></p>

                    </div>
        </div>
      </div>
      <div id="license-area" class="license-area">
        <a href="https://github.com/clarkgrubb/hyperpolyglot/issues">issue tracker</a> |
        content of this page licensed under
        <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">
        creative commons attribution-sharealike 3.0</a>
        <br>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-17129977-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

</body>
</html>
